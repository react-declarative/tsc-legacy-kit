// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../dayjs
//   ../../react
//   ../../@mui/x-data-grid
//   ../../@mui/material
//   ../../history

declare module 'react-declarative' {
    import { TypedField as TypedFieldInternal } from 'react-declarative/model/TypedField';
    import { IField as IFieldInternal } from 'react-declarative/model/IField';
    import { IColumn as IColumnInternal } from 'react-declarative/model/IColumn';
    import { FieldType as FieldTypeInternal } from 'react-declarative/model/FieldType';
    import { ColumnType as ColumnTypeInternal } from 'react-declarative/model/ColumnType';
    import { ActionType as ActionTypeInternal } from 'react-declarative/model/ActionType';
    import { DisplayMode as DisplayModeInternal } from 'react-declarative/model/DisplayMode';
    import { SelectionMode as SelectionModeInternal } from 'react-declarative/model/SelectionMode';
    import { IListApi as IListApiInternal } from 'react-declarative/model/IListApi';
    import { IListAction as IListActionInternal } from 'react-declarative/model/IListProps';
    import { IOption as IOptionInternal } from 'react-declarative/model/IOption';
    import { IMenuGroup as IMenuGroupInternal, IMenuOption as IMenuOptionInternal } from 'react-declarative/model/IMenuGroup';
    import { ListHandlerPagination as ListHandlerPaginationInternal } from 'react-declarative/model/IListProps';
    import { ListHandlerSortModel as ListHandlerSortModelInternal } from 'react-declarative/model/IListProps';
    import { ListHandlerResult as ListHandlerResultInternal } from 'react-declarative/model/IListProps';
    import { ListHandler as ListHandlerInternal } from 'react-declarative/model/IListProps';
    import { OneHandler as OneHandlerInternal } from 'react-declarative/model/IOneProps';
    import { useConfirm } from 'react-declarative/components';
    import { useDate, useTime } from 'react-declarative/components';
    import { useOne, useOneTyped } from 'react-declarative/components';
    import { useList, useListTyped } from 'react-declarative/components';
    import IAnything from 'react-declarative/model/IAnything';
    import IRowData from 'react-declarative/model/IRowData';
    import ISwitchItemInternal from 'react-declarative/components/Switch/model/ISwitchItem';
    export type ISwitchItem = ISwitchItemInternal;
    export const FieldType: typeof FieldTypeInternal;
    export const ColumnType: typeof ColumnTypeInternal;
    export const ActionType: typeof ActionTypeInternal;
    export const DisplayMode: typeof DisplayModeInternal;
    export const SelectionMode: typeof SelectionModeInternal;
    export type TypedField<Data = IAnything> = TypedFieldInternal<Data>;
    export type IField<Data = IAnything> = IFieldInternal<Data>;
    export type ListHandler<FilterData = IAnything, RowData extends IRowData = IAnything> = ListHandlerInternal<FilterData, RowData>;
    export type ListHandlerResult<RowData extends IRowData = IAnything> = ListHandlerResultInternal<RowData>;
    export type OneHandler<Data = IAnything> = OneHandlerInternal<Data>;
    export type ListHandlerPagination = ListHandlerPaginationInternal;
    export type ListHandlerSortModel = ListHandlerSortModelInternal;
    export type IListAction = IListActionInternal;
    export type IMenuOption = IMenuOptionInternal;
    export type IMenuGroup = IMenuGroupInternal;
    export type IListApi = IListApiInternal;
    export type IOption = IOptionInternal;
    export type IColumn = IColumnInternal;
    export type pickOneTypedFn = ReturnType<typeof useOneTyped>;
    export type pickOneFn = ReturnType<typeof useOne>;
    export type pickDateFn = ReturnType<typeof useDate>;
    export type pickTimeFn = ReturnType<typeof useTime>;
    export type pickListTypedFn = ReturnType<typeof useListTyped>;
    export type pickListFn = ReturnType<typeof useList>;
    export type pickConfirmFn = ReturnType<typeof useConfirm>;
    export { default as dayjs } from 'dayjs';
    export { BottomFade } from 'react-declarative/components/common/BottomFade';
    export { ScrollView } from 'react-declarative/components/common/ScrollView';
    export { AutoSizer } from 'react-declarative/components/common/AutoSizer';
    export { FadeView } from 'react-declarative/components/common/FadeView';
    export { Async } from 'react-declarative/components/common/Async';
    export { List, ListTyped } from 'react-declarative/components';
    export { One, OneTyped } from 'react-declarative/components';
    export { Translate } from 'react-declarative/components';
    export { register as registerTr } from 'react-declarative/components/Translate';
    export { ModalProvider } from 'react-declarative/components';
    export { SlotFactory } from 'react-declarative/components';
    export { Breadcrumbs } from 'react-declarative/components';
    export { Scaffold } from 'react-declarative/components';
    export { Switch } from 'react-declarative/components';
    export { useListProps } from 'react-declarative/components';
    export { useList, useListTyped };
    export { useOne, useOneTyped };
    export { useDate, useTime };
    export { useConfirm };
    import { ICheckBoxSlot as ICheckBoxSlotInternal } from 'react-declarative/slots/CheckBoxSlot';
    import { IComboSlot as IComboSlotInternal } from 'react-declarative/slots/ComboSlot';
    import { IItemsSlot as IItemsSlotInternal } from 'react-declarative/slots/ItemsSlot';
    import { ILineSlot as ILineSlotInternal } from 'react-declarative/slots/LineSlot';
    import { IProgressSlot as IProgressSlotInternal } from 'react-declarative/slots/ProgressSlot';
    import { IRadioSlot as IRadioSlotInternal } from 'react-declarative/slots/RadioSlot';
    import { IRatingSlot as IRatingSlotInternal } from 'react-declarative/slots/RatingSlot';
    import { ISliderSlot as ISliderSlotInternal } from 'react-declarative/slots/SliderSlot';
    import { ISwitchSlot as ISwitchSlotInternal } from 'react-declarative/slots/SwitchSlot';
    import { ITextSlot as ITextSlotInternal } from 'react-declarative/slots/TextSlot';
    import { ITypographySlot as ITypographySlotInternal } from 'react-declarative/slots/TypographySlot';
    export type ICheckBoxSlot = ICheckBoxSlotInternal;
    export type IComboSlot = IComboSlotInternal;
    export type IItemsSlot = IItemsSlotInternal;
    export type ILineSlot = ILineSlotInternal;
    export type IProgressSlot = IProgressSlotInternal;
    export type IRadioSlot = IRadioSlotInternal;
    export type IRatingSlot = IRatingSlotInternal;
    export type ISliderSlot = ISliderSlotInternal;
    export type ISwitchSlot = ISwitchSlotInternal;
    export type ITextSlot = ITextSlotInternal;
    export type ITypographySlot = ITypographySlotInternal;
}

declare module 'react-declarative/model/TypedField' {
    import IManaged, { IManagedShallow } from 'react-declarative/model/IManaged';
    import IEntity from 'react-declarative/model/IEntity';
    import FieldType from 'react-declarative/model/FieldType';
    import IAnything from 'react-declarative/model/IAnything';
    /**
        * Компоновки
        */
    import { IFragmentLayoutProps } from 'react-declarative/layouts/FragmentLayout';
    import { IDivLayoutProps } from 'react-declarative/layouts/DivLayout';
    import { ITabsLayoutProps } from 'react-declarative/layouts/TabsLayout';
    import { ICenterLayoutProps } from 'react-declarative/layouts/CenterLayout';
    import { IStretchLayoutProps } from 'react-declarative/layouts/StretchLayout';
    import { IGroupLayoutProps } from 'react-declarative/layouts/GroupLayout';
    import { IOutlineLayoutProps } from 'react-declarative/layouts/OutlineLayout';
    import { IPaperLayoutProps } from 'react-declarative/layouts/PaperLayout';
    import { IExpansionLayoutProps } from 'react-declarative/layouts/ExpansionLayout';
    import { IHeroLayoutProps } from 'react-declarative/layouts/HeroLayout';
    /**
        * Поля ввода
        */
    import { ICheckboxFieldProps } from 'react-declarative/fields/CheckboxField';
    import { IComboFieldProps } from 'react-declarative/fields/ComboField';
    import { IComponentFieldProps } from 'react-declarative/fields/ComponentField';
    import { IItemsFieldProps } from 'react-declarative/fields/ItemsField';
    import { ILineFieldProps } from 'react-declarative/fields/LineField';
    import { IProgressFieldProps } from 'react-declarative/fields/ProgressField';
    import { IRadioFieldProps } from 'react-declarative/fields/RadioField';
    import { IRatingFieldProps } from 'react-declarative/fields/RatingField';
    import { ISliderFieldProps } from 'react-declarative/fields/SliderField';
    import { ISwitchFieldProps } from 'react-declarative/fields/SwitchField';
    import { ITextFieldProps } from 'react-declarative/fields/TextField';
    import { ITypographyFieldProps } from 'react-declarative/fields/TypographyField';
    type Exclude<Data = IAnything> = Omit<IManaged<Data>, keyof IEntity<Data>>;
    type TypedFieldFactory<Type extends FieldType, Fields extends {}, Data = IAnything> = {
            [Prop in keyof Omit<Fields, keyof Exclude<Data>>]?: Fields[Prop];
    } & {
            type: Type;
    };
    type TypedFieldFactoryShallow<Type extends FieldType, Fields extends {}, Data = IAnything> = IManagedShallow<Data> & TypedFieldFactory<Type, Fields, Data>;
    type Group<Data = IAnything> = TypedFieldFactory<FieldType.Group, IGroupLayoutProps<Data>, Data>;
    type Paper<Data = IAnything> = TypedFieldFactory<FieldType.Paper, IPaperLayoutProps<Data>, Data>;
    type Outline<Data = IAnything> = TypedFieldFactory<FieldType.Outline, IOutlineLayoutProps<Data>, Data>;
    type Expansion<Data = IAnything> = TypedFieldFactory<FieldType.Expansion, IExpansionLayoutProps<Data>, Data>;
    type Fragment<Data = IAnything> = TypedFieldFactory<FieldType.Fragment, IFragmentLayoutProps<Data>, Data>;
    type Div<Data = IAnything> = TypedFieldFactory<FieldType.Div, IDivLayoutProps<Data>, Data>;
    type Tabs<Data = IAnything> = TypedFieldFactory<FieldType.Tabs, ITabsLayoutProps<Data>, Data>;
    type Hero<Data = IAnything> = TypedFieldFactory<FieldType.Hero, IHeroLayoutProps<Data>, Data>;
    type Center<Data = IAnything> = TypedFieldFactory<FieldType.Center, ICenterLayoutProps<Data>, Data>;
    type Stretch<Data = IAnything> = TypedFieldFactory<FieldType.Stretch, IStretchLayoutProps<Data>, Data>;
    type Line<Data = IAnything> = TypedFieldFactory<FieldType.Line, ILineFieldProps<Data>, Data>;
    type Checkbox<Data = IAnything> = TypedFieldFactoryShallow<FieldType.Checkbox, ICheckboxFieldProps<Data>, Data>;
    type Combo<Data = IAnything> = TypedFieldFactoryShallow<FieldType.Combo, IComboFieldProps<Data>, Data>;
    type Component<Data = IAnything> = TypedFieldFactoryShallow<FieldType.Component, IComponentFieldProps<Data>, Data>;
    type Items<Data = IAnything> = TypedFieldFactoryShallow<FieldType.Items, IItemsFieldProps<Data>, Data>;
    type Progress<Data = IAnything> = TypedFieldFactoryShallow<FieldType.Progress, IProgressFieldProps<Data>, Data>;
    type Radio<Data = IAnything> = TypedFieldFactoryShallow<FieldType.Radio, IRadioFieldProps<Data>, Data>;
    type Rating<Data = IAnything> = TypedFieldFactoryShallow<FieldType.Rating, IRatingFieldProps<Data>, Data>;
    type Slider<Data = IAnything> = TypedFieldFactoryShallow<FieldType.Slider, ISliderFieldProps<Data>, Data>;
    type Switch<Data = IAnything> = TypedFieldFactoryShallow<FieldType.Switch, ISwitchFieldProps<Data>, Data>;
    type Text<Data = IAnything> = TypedFieldFactoryShallow<FieldType.Text, ITextFieldProps<Data>, Data>;
    type Typography<Data = IAnything> = TypedFieldFactoryShallow<FieldType.Typography, ITypographyFieldProps<Data>, Data>;
    /**
        * Логическое ветвление компонентов
        * Typescript type-guard
        */
    export type TypedFieldRegistry<Data = IAnything, Target = any> = Target extends Expansion<Data> ? Expansion<Data> : Target extends Group<Data> ? Group<Data> : Target extends Paper<Data> ? Paper<Data> : Target extends Outline<Data> ? Outline<Data> : Target extends Checkbox<Data> ? Checkbox<Data> : Target extends Combo<Data> ? Combo<Data> : Target extends Component<Data> ? Component<Data> : Target extends Items<Data> ? Items<Data> : Target extends Line<Data> ? Line<Data> : Target extends Progress<Data> ? Progress<Data> : Target extends Radio<Data> ? Radio<Data> : Target extends Rating<Data> ? Rating<Data> : Target extends Slider<Data> ? Slider<Data> : Target extends Switch<Data> ? Switch<Data> : Target extends Text<Data> ? Text<Data> : Target extends Typography<Data> ? Typography<Data> : Target extends Fragment<Data> ? Fragment<Data> : Target extends Div<Data> ? Div<Data> : Target extends Tabs<Data> ? Tabs<Data> : Target extends Center<Data> ? Center<Data> : Target extends Stretch<Data> ? Stretch<Data> : Target extends Hero<Data> ? Hero<Data> : never;
    /**
        * IOneProps - генерик, для прикладного программиста мы можем подменить IField
        * на TypedField.  Это  позволит  автоматически  выбрать  интерфейс  props для
        * IntelliSense после указания *type* или методом исключения
        */
    export type TypedField<Data = IAnything> = TypedFieldRegistry<Data> & {
            name?: string;
            fields?: TypedField<Data>[];
            child?: TypedField<Data>;
    };
    export default TypedField;
}

declare module 'react-declarative/model/IField' {
    import * as React from 'react';
    import { ISizeCallback } from 'react-declarative/model/ISize';
    import FieldType from 'react-declarative/model/FieldType';
    import IAnything from 'react-declarative/model/IAnything';
    export type Value = string | string[] | number | boolean | null;
    /**
        * Объект поля для прикладного программиста
        */
    export interface IField<Data = IAnything> {
            /**
                * Общие поля. Поле name позволяет задать забор
                * поля из целевого объекта, не нужен для group,
                * expansion и line.
                */
            name?: string;
            /**
                * Список ролей, необходимых для отображения поля
                */
            roles?: string[];
            /**
                * Коллбеки, вызываемый при фокусировкеи потере фокуса.
                * Подразумевается изменение формы со стороны прикладного
                * программиста, а не работа с полем ввода
                * (например, обновление ссылки на изображение)
                */
            focus?: () => void;
            blur?: () => void;
            /**
                * Флаг только на чтение и "круглой окаймовки". У
                * компонента List филды принудительно получают
                * значения false.
                */
            readonly?: boolean;
            outlined?: boolean;
            /**
                * Передает ссылку при перерисовках
                */
            groupRef?: (element: HTMLDivElement) => void;
            inputRef?: (element: HTMLInputElement) => void;
            /**
                * Автофокус и постоянное отключение поля
                */
            autoFocus?: boolean;
            disabled?: boolean;
            /**
                * Поле, специфичное для RadioField и позволяющее
                * задать значение при выборе элемента кликом
                */
            radioValue?: string;
            /**
                * Поле type для MatTextField
                */
            inputType?: keyof {
                    'text': never;
                    'color': never;
                    'date': never;
                    'email': never;
                    'month': never;
                    'number': never;
                    'password': never;
                    'search': never;
                    'tel': never;
                    'time': never;
                    'url': never;
                    'week': never;
            };
            inputAutocomplete?: keyof {
                    'new-password': never;
                    'on': never;
                    'off': never;
                    'false': never;
            };
            /**
                * Список вкладок для TabLayout
                */
            tabList?: string[];
            /**
                * Номер активной вкладки по-умолчанию
                */
            tabIndex?: number;
            /**
                * Вариант вывода вкладок для TabLayout
                */
            tabVariant?: "fullWidth" | "standard" | "scrollable";
            /**
                * Цвет вкладок для TabLayout
                */
            tabColor?: "primary" | "secondary";
            /**
                * Позволяет содержимому растягивать высоту блока
                * у TabLayout
                */
            tabKeepFlow?: boolean;
            /**
                * Событие изменения вкладки
                */
            tabChange?: (idx: number) => void;
            /**
                * Отделяет табы отчерком у TabLayout
                */
            tabLine?: boolean;
            /**
                * Закрашивает фон TabLayout в темный цвет
                */
            tabBackground?: boolean;
            /**
                * Делает TextField многострочным, если
                * inputRows больше единицы
                */
            inputRows?: number;
            /**
                * Иконки для MatTextField
                */
            leadingIcon?: string | React.ComponentType;
            trailingIcon?: string | React.ComponentType;
            /**
                * При клике на иконку мы можем запросить данные из модального
                * окна, расположенного в коде прикладного программиста. Коллбек
                * получает на вход текущее значение поля и функцию onChange...
                */
            leadingIconClick?: (value: any, onChange: (v: any) => void) => void;
            trailingIconClick?: (value: any, onChange: (v: any) => void) => void;
            /**
                * Максимальное число для высчитывания процента
                * (минимальное число всегда ноль)
                */
            maxPercent?: number;
            /**
                * Показывает процент числом слева
                */
            showPercentLabel?: boolean;
            /**
                * Внутренние отступы для Paper
                */
            innerPadding?: string;
            /**
                * - Коллбеки, позволяющий перекрасить SliderField.
                * Работают только если заданы все вместе
                * - ВНИМАНИЕ! Потенциально возможна просадка производительности,
                * так как осуществляет рекомпиляцию стилей material-ui
                */
            sliderThumbColor?: (v: number) => string;
            sliderTrackColor?: (v: number) => string;
            sliderRailColor?: (v: number) => string;
            /**
                *  - Коллбеки, позволяющие перекрасить ProgressField.
                * Работают только если заданы все вместе
                *  - ВНИМАНИЕ! Потенциально возможна просадка производительности,
                * так как осуществляет рекомпиляцию стилей material-ui
                */
            progressColor?: (v: number) => string;
            progressBarColor?: (v: number) => string;
            /**
                * Поля, специфичные для SliderField
                */
            minSlider?: number;
            maxSlider?: number;
            stepSlider?: number;
            /**
                * Варианты выбора для ComboField и ItemsField
                */
            itemList?: string[] | (() => string[]) | (() => Promise<string[]>);
            /**
                * Позволяет перевести значения у ComboField и ItemsField
                * из поле itemList на человеческий, если
                * используются константы
                */
            tr?: ((s: string) => string) | ((s: string) => Promise<string>);
            /**
                * Тип поля для логического ветвления при рендеринге
                */
            type: FieldType;
            /**
                * Наименование класса для корневого элемента поля (опционально)
                */
            className?: string;
            /**
                * Стиль корневого элемента для поля (опционально)
                */
            style?: React.CSSProperties;
            /**
                * Заголовок и описание, если возможен вывод у поля
                */
            title?: string;
            description?: string;
            /**
                * placeholder для TextField, ComboField, ItemsField
                */
            placeholder?: string;
            /**
                * Колонки для One. Не используются в List (кроме фильтров).
                * Если указано поле columns, то остальные приравниваются к
                * его значению
                */
            columns?: string;
            phoneColumns?: string;
            tabletColumns?: string;
            desktopColumns?: string;
            /**
                * Дочерние поля для групп
                */
            fields?: IField<Data>[];
            child?: IField<Data>;
            /**
                * Функция, позволяющая организовать валидацию. Если
                * возвращаемое значение не равно null, считается за
                * ошибкую
                */
            isInvalid?: (v: Data) => null | string;
            /**
                * Функция, позволяющая скрыть поле, исходя из целевого
                * объекта
                */
            isVisible?: (v: Data) => boolean;
            /**
                * Функция, позволяющая отключить поле, исходя из целевого
                * объекта
                */
            isDisabled?: (v: Data) => boolean;
            /**
                * Функция, применяемая если значение поля вычисляется динамически.
                * Включает readonly.
                */
            compute?: (v: Data) => Promise<Value> | Value;
            /**
                * Инъекция JSX для ComponentField
                */
            element?: React.ComponentType<Data>;
            /**
                * Коллбек, вызываемый у поля при не прохождении
                * валидации
                */
            invalidity?: (e: string) => void;
            /**
                * Значение по-умолчанию для поля
                */
            defaultValue?: Value;
            /**
                * Позволяет выключить отступ. Можно использовать по аналогии
                * с исключением последней запятой при склеивании массива
                * руками, если раздражает
                */
            fieldRightMargin?: string;
            fieldBottomMargin?: string;
            /**
                * Шрифт для поля Typography
                */
            typoVariant?: keyof {
                    h2: 'h2';
                    h3: 'h3';
                    h4: 'h4';
                    h5: 'h5';
                    h6: 'h6';
                    subtitle1: 'subtitle1';
                    subtitle2: 'subtitle2';
                    body1: 'body1';
                    body2: 'body2';
            };
            /**
                * Свойства для компоновки Hero - инструмента настройки отступов
                */
            top?: string | ISizeCallback<Data>;
            phoneTop?: string | ISizeCallback<Data>;
            tabletTop?: string | ISizeCallback<Data>;
            desktopTop?: string | ISizeCallback<Data>;
            left?: string | ISizeCallback<Data>;
            phoneLeft?: string | ISizeCallback<Data>;
            tabletLeft?: string | ISizeCallback<Data>;
            desktopLeft?: string | ISizeCallback<Data>;
            right?: string | ISizeCallback<Data>;
            phoneRight?: string | ISizeCallback<Data>;
            tabletRight?: string | ISizeCallback<Data>;
            desktopRight?: string | ISizeCallback<Data>;
            bottom?: string | ISizeCallback<Data>;
            phoneBottom?: string | ISizeCallback<Data>;
            tabletBottom?: string | ISizeCallback<Data>;
            desktopBottom?: string | ISizeCallback<Data>;
            height?: string | ISizeCallback<Data>;
            phoneHeight?: string | ISizeCallback<Data>;
            tabletHeight?: string | ISizeCallback<Data>;
            desktopHeight?: string | ISizeCallback<Data>;
            minHeight?: string | ISizeCallback<Data>;
            phoneMinHeight?: string | ISizeCallback<Data>;
            tabletMinHeight?: string | ISizeCallback<Data>;
            desktopMinHeight?: string | ISizeCallback<Data>;
            maxHeight?: string | ISizeCallback<Data>;
            phoneMaxHeight?: string | ISizeCallback<Data>;
            tabletMaxHeight?: string | ISizeCallback<Data>;
            desktopMaxHeight?: string | ISizeCallback<Data>;
            width?: string | ISizeCallback<Data>;
            phoneWidth?: string | ISizeCallback<Data>;
            tabletWidth?: string | ISizeCallback<Data>;
            desktopWidth?: string | ISizeCallback<Data>;
            minWidth?: string | ISizeCallback<Data>;
            phoneMinWidth?: string | ISizeCallback<Data>;
            tabletMinWidth?: string | ISizeCallback<Data>;
            desktopMinWidth?: string | ISizeCallback<Data>;
            maxWidth?: string | ISizeCallback<Data>;
            phoneMaxWidth?: string | ISizeCallback<Data>;
            tabletMaxWidth?: string | ISizeCallback<Data>;
            desktopMaxWidth?: string | ISizeCallback<Data>;
            heroOuterStyle?: React.CSSProperties;
            heroOuterPhoneStyle?: React.CSSProperties;
            heroOuterTabletStyle?: React.CSSProperties;
            heroOuterDesktopStyle?: React.CSSProperties;
            heroInnerStyle?: React.CSSProperties;
            heroInnerPhoneStyle?: React.CSSProperties;
            heroInnerTabletStyle?: React.CSSProperties;
            heroInnerDesktopStyle?: React.CSSProperties;
    }
    export default IField;
}

declare module 'react-declarative/model/IColumn' {
    import { GridCellParams, GridColumnHeaderParams, GridComparatorFn } from '@mui/x-data-grid';
    import ColumnType from "react-declarative/model/ColumnType";
    import IAnything from 'react-declarative/model/IAnything';
    import IRowData from 'react-declarative/model/IRowData';
    import IOption from 'react-declarative/model/IOption';
    import { Value } from 'react-declarative/model/IField';
    export interface IColumn<RowData extends IRowData = IAnything> {
        type: ColumnType;
        field?: string;
        primary?: boolean;
        secondary?: boolean;
        headerName: string;
        width: string | (() => string | number);
        columnMenu?: IOption[];
        showColumnMenu?: boolean;
        sizerCellPadding?: {
            paddingTop: number;
            paddingLeft: number;
            paddingRight: number;
            paddingBottom: number;
        };
        sizerCellStyle?: {
            whiteSpace: string;
            overflowWrap: string;
            lineHeight: string;
            fontSize: string;
            fontWeight: string;
            border: string;
        };
        compute?: (row: RowData) => Promise<Value> | Value;
        element?: React.ComponentType<RowData>;
        requiredHeight?: number;
        sizerGetText?: (row: RowData) => string;
        renderCell?: (props: GridCellParams) => JSX.Element;
        renderHeader?: (props: GridColumnHeaderParams) => JSX.Element;
        sortComparator?: GridComparatorFn;
        sortable?: boolean;
    }
    export default IColumn;
}

declare module 'react-declarative/model/FieldType' {
    export enum FieldType {
        Switch = "switch-field",
        Line = "line-field",
        Group = "group-layout",
        Paper = "paper-layout",
        Outline = "outline-layout",
        Expansion = "expansion-layout",
        Radio = "radio-field",
        Checkbox = "checkbox-field",
        Text = "text-field",
        Progress = "progress-field",
        Component = "component-field",
        Slider = "slider-field",
        Combo = "combo-field",
        Items = "items-field",
        Rating = "rating-field",
        Typography = "typography-field",
        Fragment = "fragment-layout",
        Div = "div-layout",
        Tabs = "tabs-layout",
        Hero = "hero-layout",
        Center = "center-layout",
        Stretch = "stretch-layout"
    }
    export default FieldType;
}

declare module 'react-declarative/model/ColumnType' {
    export enum ColumnType {
        Text = "text-cell",
        Action = "action-cell",
        CheckBox = "checkbox-cell",
        Compute = "compute-cell",
        Component = "component-cell",
        Custom = "custom-cell"
    }
    export default ColumnType;
}

declare module 'react-declarative/model/ActionType' {
    export enum ActionType {
        Add = "add-action",
        Menu = "menu-action"
    }
    export default ActionType;
}

declare module 'react-declarative/model/DisplayMode' {
    export enum DisplayMode {
        Desktop = "desktop",
        Mobile = "mobile"
    }
    export default DisplayMode;
}

declare module 'react-declarative/model/SelectionMode' {
    export enum SelectionMode {
        Single = "single-selection",
        Multiple = "multiple-selection",
        None = "none-selection"
    }
    export default SelectionMode;
}

declare module 'react-declarative/model/IListApi' {
    export interface IListApi {
        reload: () => void;
    }
    export default IListApi;
}

declare module 'react-declarative/model/IListProps' {
    import { Ref } from 'react';
    import { GridColumns, GridSortModel } from '@mui/x-data-grid';
    import ActionType from 'react-declarative/model/ActionType';
    import DisplayMode from 'react-declarative/model/DisplayMode';
    import SelectionMode from 'react-declarative/model/SelectionMode';
    import IAnything from 'react-declarative/model/IAnything';
    import IRowData from 'react-declarative/model/IRowData';
    import IColumn from 'react-declarative/model/IColumn';
    import IOption from 'react-declarative/model/IOption';
    import IField from 'react-declarative/model/IField';
    import IListApi from 'react-declarative/model/IListApi';
    interface IUpdateOption extends IOption {
        action: 'update-now';
        label: never;
        icon: never;
    }
    interface IAutoReloadOption extends IOption {
        action: 'auto-reload';
        label: never;
        icon: never;
    }
    interface IMobileViewOption extends IOption {
        action: 'mobile-view';
        label: never;
        icon: never;
    }
    export interface IListAction extends Partial<IOption> {
        type: ActionType;
        options?: Partial<IOption | IUpdateOption | IAutoReloadOption | IMobileViewOption>[];
    }
    interface ComponentProps {
        columnMenuProps?: any;
        errorOverlayProps?: any;
        footerProps?: any;
        headerProps?: any;
        toolbarProps?: any;
        preferencesPanelProps?: any;
        loadingOverlayProps?: any;
        noResultsOverlayProps?: any;
        noRowsOverlayProps?: any;
        paginationProps?: any;
        filterPanelProps?: any;
        columnsPanelProps?: any;
        panelProps?: any;
    }
    interface SlotsComponent {
        Header?: any;
        ColumnMenu?: any;
        ErrorOverlay?: any;
        Footer?: any;
        Toolbar?: any;
        CheckBox?: any;
        PreferencesPanel?: any;
        LoadingOverlay?: any;
        NoResultsOverlay?: any;
        NoRowsOverlay?: any;
        Pagination?: any;
        FilterPanel?: any;
        ColumnsPanel?: any;
        Panel?: any;
    }
    export type ListHandlerResult<RowData extends IRowData = IAnything> = RowData[] | {
        rows: RowData[];
        total: number;
    };
    export type ListAvatar = {
        src?: string;
        alt?: string;
    };
    export type ListHandlerPagination = {
        limit: number;
        offset: number;
    };
    export type ListHandlerSortModel = GridSortModel;
    export type ListHandler<FilterData = IAnything, RowData extends IRowData = IAnything> = RowData[] | ((data: FilterData, pagination: ListHandlerPagination, sort: ListHandlerSortModel) => Promise<ListHandlerResult<RowData>> | ListHandlerResult<RowData>);
    export interface IListState<FilterData = IAnything, RowData extends IRowData = IAnything> {
        initComplete: boolean;
        filterData: FilterData;
        isMobile: boolean;
        rows: RowData[];
        rowHeight: number;
        limit: number;
        offset: number;
        total: number | null;
        uniqueKey: string;
        loading: boolean;
        autoReload: boolean;
        filtersCollapsed: boolean;
        sort: ListHandlerSortModel;
    }
    export interface IListCallbacks<FilterData = IAnything, RowData extends IRowData = IAnything> {
        handleDefault: ListHandler<FilterData, RowData> | (() => void);
        handleSortModel: (sort: ListHandlerSortModel) => void;
        handleFilter: (data: FilterData) => void;
        handlePageChange: (page: number) => void;
        handleLimitChange: (limit: number) => void;
        handleFiltersCollapsed: (filtersCollapsed: boolean) => void;
        handleAutoReload: (autoReload: boolean) => void;
        handleSetMobile: (isMobile: boolean) => void;
        handleReload: () => void;
        ready: () => void;
    }
    export interface IListProps<FilterData extends IAnything = IAnything, RowData extends IRowData = IAnything, Field extends IField = IField<FilterData>> extends SlotsComponent, ComponentProps {
        ref?: Ref<IListApi>;
        className?: string;
        style?: React.CSSProperties;
        title?: string;
        filterLabel?: string;
        actions?: IListAction[];
        limit?: number;
        sizeByParent?: boolean;
        autoReload?: boolean;
        autoReloadInterval?: number;
        heightRequest?: (height: number) => number;
        widthRequest?: (width: number) => number;
        onSelectedRows?: (rows: RowData[]) => void;
        onFilterChange?: (data: FilterData) => void;
        onSortModelChange?: (sort: ListHandlerSortModel) => void;
        onColumnMenuAction?: (action: string) => void;
        onRowAction?: (row: RowData, action: string) => void;
        onRowClick?: (row: RowData) => void;
        onAction?: (action: string) => void;
        gridColumns?: GridColumns;
        columns?: IColumn<RowData>[];
        filters?: Field[];
        handler: ListHandler;
        rowMark?: ((row: RowData) => string) | ((row: RowData) => Promise<string>) | string;
        rowAvatar?: ((row: RowData) => ListAvatar) | ((row: RowData) => Promise<ListAvatar>) | ListAvatar;
        fallback?: (e: Error) => void;
        rowActions?: IOption[];
        toggleFilters?: boolean;
        selectionMode?: SelectionMode;
        displayMode?: DisplayMode;
    }
    export default IListProps;
}

declare module 'react-declarative/model/IOption' {
    import React from "react";
    export interface IOption {
        label: string;
        action: string;
        icon?: React.ComponentType<any>;
    }
    export default IOption;
}

declare module 'react-declarative/model/IMenuGroup' {
    import * as React from 'react';
    export interface IMenuOption {
        name?: string;
        label: string;
        icon?: React.ComponentType;
        bold?: boolean;
        roles?: string[];
        disabled?: boolean;
    }
    export interface IMenuGroup extends IMenuOption {
        options?: IMenuGroup[];
    }
    export default IMenuGroup;
}

declare module 'react-declarative/model/IOneProps' {
    import IField from 'react-declarative/model/IField';
    import IAnything from 'react-declarative/model/IAnything';
    export type OneHandler<Data = IAnything> = Data | (() => Data | null) | (() => Promise<Data | null>);
    export interface IOneProps<Data = IAnything, Field = IField<Data>> {
            /**
                * Класс корневой группы
                */
            className?: string;
            /**
                * Список ролей, ограничивающий отображение полей
                */
            roles?: string[];
            /**
                * Стиль корневой группы
                */
            style?: React.CSSProperties;
            /**
                * Позволяет загружать данные в компонент
                */
            handler?: OneHandler<Data>;
            /**
                * Вызывается при ошибке в handler
                */
            fallback?: (e: Error) => void;
            /**
                * Коллбек, вызываемый при не прохождении
                * валидации
                */
            invalidity?: (e: string) => void;
            /**
                * Вызываются при фокусировки по филду
                * в компоненте и потере фокуса
                */
            focus?: () => void;
            blur?: () => void;
            /**
                * Вызывается, когда все поля успели отрисоваться
                * в первый раз, после появления формы
                */
            ready?: () => void;
            /**
                * Вызывается после изменения и передает измененный
                * объект прикладному программисту
                */
            change?: (Data: Data, initial: boolean) => void;
            /**
                * Массив полей, выводимый в компоненте
                */
            fields: Field[];
            /**
                * Префикс для формирования ключей элементов
                */
            prefix?: string;
    }
    export default IOneProps;
}

declare module 'react-declarative/components' {
    export * from 'react-declarative/components/One';
    export * from 'react-declarative/components/List';
    export * from 'react-declarative/components/Switch';
    export * from 'react-declarative/components/Scaffold';
    export * from 'react-declarative/components/Translate';
    export * from 'react-declarative/components/SlotFactory';
    export * from 'react-declarative/components/Breadcrumbs';
    export * from 'react-declarative/components/hooks/useDate';
    export * from 'react-declarative/components/hooks/useTime';
    export * from 'react-declarative/components/hooks/useOne';
    export * from 'react-declarative/components/hooks/useList';
    export * from 'react-declarative/components/hooks/useConfirm';
    export * from 'react-declarative/components/common/ModalProvider';
}

declare module 'react-declarative/model/IAnything' {
    export type IAnything = any;
    export default IAnything;
}

declare module 'react-declarative/model/IRowData' {
    export interface IRowData {
        id: string | number;
    }
    export default IRowData;
}

declare module 'react-declarative/components/Switch/model/ISwitchItem' {
    export interface ISwitchItem {
        path: string;
        component?: React.ComponentType<any>;
        guard?: () => boolean | Promise<boolean>;
        redirect?: string;
    }
    export default ISwitchItem;
}

declare module 'react-declarative/components/common/BottomFade' {
    export * from 'react-declarative/components/common/BottomFade/BottomFade';
    export { default } from 'react-declarative/components/common/BottomFade/BottomFade';
}

declare module 'react-declarative/components/common/ScrollView' {
    export * from 'react-declarative/components/common/ScrollView/ScrollView';
    export { default } from 'react-declarative/components/common/ScrollView/ScrollView';
}

declare module 'react-declarative/components/common/AutoSizer' {
    export * from "react-declarative/components/common/AutoSizer/AutoSizer";
    export { default } from "react-declarative/components/common/AutoSizer/AutoSizer";
}

declare module 'react-declarative/components/common/FadeView' {
    export * from 'react-declarative/components/common/FadeView/FadeView';
    export { default } from 'react-declarative/components/common/FadeView/FadeView';
}

declare module 'react-declarative/components/common/Async' {
    export * from 'react-declarative/components/common/Async/Async';
    export { default } from 'react-declarative/components/common/Async/Async';
}

declare module 'react-declarative/components/Translate' {
    export * from 'react-declarative/components/Translate/Translate';
    export { default } from 'react-declarative/components/Translate/Translate';
}

declare module 'react-declarative/slots/CheckBoxSlot' {
    export * from 'react-declarative/slots/CheckBoxSlot/ICheckBoxSlot';
    export * from 'react-declarative/slots/CheckBoxSlot/CheckBoxSlot';
    export { default } from 'react-declarative/slots/CheckBoxSlot/CheckBoxSlot';
}

declare module 'react-declarative/slots/ComboSlot' {
    export * from 'react-declarative/slots/ComboSlot/IComboSlot';
    export * from 'react-declarative/slots/ComboSlot/ComboSlot';
    export { default } from 'react-declarative/slots/ComboSlot/ComboSlot';
}

declare module 'react-declarative/slots/ItemsSlot' {
    export * from 'react-declarative/slots/ItemsSlot/IItemsSlot';
    export * from 'react-declarative/slots/ItemsSlot/ItemsSlot';
    export { default } from 'react-declarative/slots/ItemsSlot/ItemsSlot';
}

declare module 'react-declarative/slots/LineSlot' {
    export * from 'react-declarative/slots/LineSlot/ILineSlot';
    export * from 'react-declarative/slots/LineSlot/LineSlot';
    export { default } from 'react-declarative/slots/LineSlot/LineSlot';
}

declare module 'react-declarative/slots/ProgressSlot' {
    export * from 'react-declarative/slots/ProgressSlot/IProgressSlot';
    export * from 'react-declarative/slots/ProgressSlot/ProgressSlot';
    export { default } from 'react-declarative/slots/ProgressSlot/ProgressSlot';
}

declare module 'react-declarative/slots/RadioSlot' {
    export * from 'react-declarative/slots/RadioSlot/IRadioSlot';
    export * from 'react-declarative/slots/RadioSlot/RadioSlot';
    export { default } from 'react-declarative/slots/RadioSlot/RadioSlot';
}

declare module 'react-declarative/slots/RatingSlot' {
    export * from 'react-declarative/slots/RatingSlot/IRatingSlot';
    export * from 'react-declarative/slots/RatingSlot/RatingSlot';
    export { default } from 'react-declarative/slots/RatingSlot/RatingSlot';
}

declare module 'react-declarative/slots/SliderSlot' {
    export * from 'react-declarative/slots/SliderSlot/ISliderSlot';
    export * from 'react-declarative/slots/SliderSlot/SliderSlot';
    export { default } from 'react-declarative/slots/SliderSlot/SliderSlot';
}

declare module 'react-declarative/slots/SwitchSlot' {
    export * from 'react-declarative/slots/SwitchSlot/ISwitchSlot';
    export * from 'react-declarative/slots/SwitchSlot/SwitchSlot';
    export { default } from 'react-declarative/slots/SwitchSlot/SwitchSlot';
}

declare module 'react-declarative/slots/TextSlot' {
    export * from 'react-declarative/slots/TextSlot/ITextSlot';
    export * from 'react-declarative/slots/TextSlot/TextSlot';
    export { default } from 'react-declarative/slots/TextSlot/TextSlot';
}

declare module 'react-declarative/slots/TypographySlot' {
    export * from 'react-declarative/slots/TypographySlot/ITypographySlot';
    export * from 'react-declarative/slots/TypographySlot/TypographySlot';
    export { default } from 'react-declarative/slots/TypographySlot/TypographySlot';
}

declare module 'react-declarative/model/IManaged' {
    import IField from 'react-declarative/model/IField';
    import IEntity from 'react-declarative/model/IEntity';
    import IAnything from 'react-declarative/model/IAnything';
    export type PickProp<T extends {}, P extends keyof T> = T[P];
    export type DeepPartial<T> = {
            [P in keyof T]?: DeepPartial<T[P]>;
    };
    /**
        * Типизацию компоновки следует вынести отдельно
        */
    export interface IManagedLayout<Data = IAnything> {
            columns?: PickProp<IField<Data>, 'columns'>;
            roles?: PickProp<IField<Data>, 'roles'>;
            phoneColumns?: PickProp<IField<Data>, 'phoneColumns'>;
            tabletColumns?: PickProp<IField<Data>, 'tabletColumns'>;
            desktopColumns?: PickProp<IField<Data>, 'desktopColumns'>;
            fieldRightMargin?: PickProp<IField<Data>, 'fieldRightMargin'>;
            fieldBottomMargin?: PickProp<IField<Data>, 'fieldBottomMargin'>;
    }
    /**
        * Компонент высшего порядка makeField
        * перехватывает управление над свойствами
        * поля
        */
    export interface IManagedShallow<Data = IAnything> extends IManagedLayout<Data> {
            isDisabled?: PickProp<IField<Data>, 'isDisabled'>;
            isVisible?: PickProp<IField<Data>, 'isVisible'>;
            isInvalid?: PickProp<IField<Data>, 'isInvalid'>;
            invalidity?: PickProp<IField<Data>, 'invalidity'>;
            compute?: PickProp<IField<Data>, 'compute'>;
            focus?: PickProp<IField<Data>, 'focus'>;
            blur?: PickProp<IField<Data>, 'blur'>;
            defaultValue?: PickProp<IField<Data>, 'defaultValue'>;
    }
    /**
        * Свойства, не доступные управляемому полю
        */
    type Exclude<Data = IAnything> = {
            object: never;
            type: never;
            focus: never;
            blur: never;
            ready: never;
            check: never;
            change: never;
            name: never;
    } & IManagedShallow<Data>;
    /**
        * Свойства сущности, обернутой в компонент высшего порядка
        * Предоставляется удобная абстракция
        */
    export interface IManaged<Data = IAnything, Value = any> extends Omit<IEntity<Data>, keyof Exclude<Data>> {
            name: string;
            value: Value;
            dirty: boolean;
            disabled: boolean;
            loading: boolean;
            invalid: string | null;
            object: Data;
            onChange: (v: Value, config?: {
                    skipReadonly?: boolean;
            }) => void;
    }
    export default IManaged;
}

declare module 'react-declarative/model/IEntity' {
    import IAnything from 'react-declarative/model/IAnything';
    import IField from 'react-declarative/model/IField';
    type exclude = 'defaultValue';
    /**
      * Объект сущность представляет собой поле прикладного
      * программииста, расширенное входным параметром и
      * коллбеком изменения для внутренней организации
      * работы. ВАЖНО - изменение поля влечет изменение
      * всего целевого объекта, следуя паттерну immutable
      */
    export interface IEntity<Data = IAnything> extends Omit<IField<Data>, exclude> {
        change?: (object: Data) => void;
        invalidity: (msg: string) => void;
        fallback: (e: Error) => void;
        ready: () => void;
        object: Data;
    }
    export default IEntity;
}

declare module 'react-declarative/layouts/FragmentLayout' {
    import * as React from 'react';
    import IField from 'react-declarative/model/IField';
    import IEntity from 'react-declarative/model/IEntity';
    import IAnything from 'react-declarative/model/IAnything';
    import { PickProp } from 'react-declarative/model/IManaged';
    export interface IFragmentLayoutProps<Data = IAnything> {
        isVisible?: PickProp<IField<Data>, 'isVisible'>;
    }
    interface IFragmentLayoutPrivate<Data = IAnything> extends IEntity<Data> {
        children: React.ReactChild;
        ready: PickProp<IEntity<Data>, 'ready'>;
        object: PickProp<IEntity<Data>, 'object'>;
    }
    /**
      * Компоновка, которую можно скрыть, используя isVisible.
      * Потомки передаются насквозь...
      */
    export const FragmentLayout: {
        <Data extends unknown = any>({ children, isVisible, object, ready, }: IFragmentLayoutProps<Data> & IFragmentLayoutPrivate<Data>): JSX.Element | null;
        displayName: string;
    };
    export default FragmentLayout;
}

declare module 'react-declarative/layouts/DivLayout' {
    import * as React from 'react';
    import IField from 'react-declarative/model/IField';
    import IEntity from 'react-declarative/model/IEntity';
    import IAnything from 'react-declarative/model/IAnything';
    import { PickProp } from 'react-declarative/model/IManaged';
    export interface IDivLayoutProps<Data = IAnything> {
        className?: PickProp<IField<Data>, 'className'>;
        style?: PickProp<IField<Data>, 'style'>;
    }
    interface IDivLayoutPrivate<Data = IAnything> extends IEntity<Data> {
        children: React.ReactChild;
    }
    export const DivLayout: {
        <Data extends unknown = any>({ children, className, style, }: IDivLayoutProps<Data> & IDivLayoutPrivate<Data>): JSX.Element;
        displayName: string;
    };
    export default DivLayout;
}

declare module 'react-declarative/layouts/TabsLayout' {
    import * as React from 'react';
    import { IGroupProps } from "react-declarative/components/common/Group";
    import IField from 'react-declarative/model/IField';
    import IEntity from 'react-declarative/model/IEntity';
    import IAnything from 'react-declarative/model/IAnything';
    import { PickProp } from 'react-declarative/model/IManaged';
    export interface ITabsLayoutProps<Data = IAnything> extends IGroupProps<Data> {
        className?: PickProp<IField<Data>, 'className'>;
        style?: PickProp<IField<Data>, 'style'>;
        tabLine?: PickProp<IField<Data>, 'tabLine'>;
        tabList?: PickProp<IField<Data>, 'tabList'>;
        tabIndex?: PickProp<IField<Data>, 'tabIndex'>;
        tabColor?: PickProp<IField<Data>, 'tabColor'>;
        tabChange?: PickProp<IField<Data>, 'tabChange'>;
        tabVariant?: PickProp<IField<Data>, 'tabVariant'>;
        tabKeepFlow?: PickProp<IField<Data>, 'tabKeepFlow'>;
        tabBackground?: PickProp<IField<Data>, 'tabBackground'>;
    }
    interface ITabsLayoutPrivate<Data = IAnything> extends IEntity<Data> {
        children: React.ReactChild;
    }
    export const TabsLayout: {
        <Data extends unknown = any>({ children, className, style, tabChange, tabVariant, tabLine, tabColor, tabList, tabKeepFlow, tabBackground, tabIndex: tabIndexDefault, columns, phoneColumns, tabletColumns, desktopColumns, fieldRightMargin, fieldBottomMargin, }: ITabsLayoutProps<Data> & ITabsLayoutPrivate<Data>): JSX.Element;
        displayName: string;
    };
    export default TabsLayout;
}

declare module 'react-declarative/layouts/CenterLayout' {
    import * as React from 'react';
    import IField from 'react-declarative/model/IField';
    import IEntity from 'react-declarative/model/IEntity';
    import IAnything from 'react-declarative/model/IAnything';
    import { PickProp } from 'react-declarative/model/IManaged';
    import { IGroupProps } from "react-declarative/components/common/Group";
    export interface ICenterLayoutProps<Data = IAnything> extends IGroupProps<Data> {
        innerPadding?: PickProp<IField<Data>, 'innerPadding'>;
        className?: PickProp<IField<Data>, 'className'>;
        style?: PickProp<IField<Data>, 'style'>;
    }
    interface ICenterLayoutPrivate<Data = IAnything> extends IEntity<Data> {
        children: React.ReactChild;
    }
    export const CenterLayout: {
        <Data extends unknown = any>({ children, className, style, innerPadding: padding, columns, phoneColumns, tabletColumns, desktopColumns, fieldRightMargin, fieldBottomMargin, }: ICenterLayoutProps<Data> & ICenterLayoutPrivate<Data>): JSX.Element;
        displayName: string;
    };
    export default CenterLayout;
}

declare module 'react-declarative/layouts/StretchLayout' {
    import * as React from 'react';
    import IField from 'react-declarative/model/IField';
    import IEntity from 'react-declarative/model/IEntity';
    import IAnything from 'react-declarative/model/IAnything';
    import { PickProp } from 'react-declarative/model/IManaged';
    export interface IStretchLayoutProps<Data = IAnything> {
        innerPadding?: PickProp<IField<Data>, 'innerPadding'>;
        className?: PickProp<IField<Data>, 'className'>;
        style?: PickProp<IField<Data>, 'style'>;
    }
    interface IStretchLayoutPrivate<Data = IAnything> extends IEntity<Data> {
        children: React.ReactChild;
    }
    export const StretchLayout: {
        <Data extends unknown = any>({ children, className, style, innerPadding: padding, }: IStretchLayoutProps<Data> & IStretchLayoutPrivate<Data>): JSX.Element;
        displayName: string;
    };
    export default StretchLayout;
}

declare module 'react-declarative/layouts/GroupLayout' {
    import * as React from "react";
    import { IGroupProps } from "react-declarative/components/common/Group";
    import IAnything from "react-declarative/model/IAnything";
    export interface IGroupLayoutProps<Data = IAnything> extends IGroupProps<Data> {
    }
    interface IGroupLayoutPrivate {
        children: React.ReactChild;
    }
    export const GroupLayout: {
        <Data extends unknown = any>({ columns, phoneColumns, tabletColumns, desktopColumns, fieldRightMargin, fieldBottomMargin, style, className, children, }: IGroupLayoutProps<Data> & IGroupLayoutPrivate): JSX.Element;
        displayName: string;
    };
    export default GroupLayout;
}

declare module 'react-declarative/layouts/OutlineLayout' {
    import * as React from "react";
    import { IGroupProps } from "react-declarative/components/common/Group";
    import { IOutlineProps } from 'react-declarative/components/common/Outline';
    import { PickProp } from "react-declarative/model/IManaged";
    import IAnything from "react-declarative/model/IAnything";
    import IField from "react-declarative/model/IField";
    export interface IOutlineLayoutProps<Data = IAnything> extends IOutlineProps<Data>, IGroupProps<Data> {
        innerPadding?: PickProp<IField<Data>, 'innerPadding'>;
    }
    interface IOutlineLayoutPrivate {
        children: React.ReactChild;
    }
    export const OutlineLayout: {
        <Data extends unknown = any>({ columns, phoneColumns, tabletColumns, desktopColumns, style, className, children, fieldRightMargin, fieldBottomMargin, innerPadding: padding, }: IOutlineLayoutProps<Data> & IOutlineLayoutPrivate): JSX.Element;
        displayName: string;
    };
    export default OutlineLayout;
}

declare module 'react-declarative/layouts/PaperLayout' {
    import * as React from "react";
    import { IGroupProps } from "react-declarative/components/common/Group";
    import { IPaperProps } from 'react-declarative/components/common/Paper';
    import { PickProp } from "react-declarative/model/IManaged";
    import IAnything from "react-declarative/model/IAnything";
    import IField from "react-declarative/model/IField";
    export interface IPaperLayoutProps<Data = IAnything> extends IPaperProps<Data>, IGroupProps<Data> {
        innerPadding?: PickProp<IField<Data>, 'innerPadding'>;
    }
    interface IPaperLayoutPrivate {
        children: React.ReactChild;
    }
    export const PaperLayout: {
        <Data extends unknown = any>({ columns, phoneColumns, tabletColumns, desktopColumns, style, className, children, fieldRightMargin, fieldBottomMargin, innerPadding: padding, }: IPaperLayoutProps<Data> & IPaperLayoutPrivate): JSX.Element;
        displayName: string;
    };
    export default PaperLayout;
}

declare module 'react-declarative/layouts/ExpansionLayout' {
    import * as React from "react";
    import { IExpansionProps } from "react-declarative/components/common/Expansion";
    import { IGroupProps } from "react-declarative/components/common/Group";
    import IAnything from "react-declarative/model/IAnything";
    export interface IExpansionLayoutProps<Data = IAnything> extends IExpansionProps<Data>, IGroupProps<Data> {
    }
    interface IExpansionLayoutPrivate {
        children: React.ReactChild;
    }
    export const ExpansionLayout: {
        <Data extends unknown = any>({ columns, phoneColumns, tabletColumns, desktopColumns, fieldRightMargin, fieldBottomMargin, style, className, children, title, description, }: IExpansionLayoutProps<Data> & IExpansionLayoutPrivate): JSX.Element;
        displayName: string;
    };
    export default ExpansionLayout;
}

declare module 'react-declarative/layouts/HeroLayout' {
    import * as React from 'react';
    import { Theme } from '@mui/material';
    import IField from 'react-declarative/model/IField';
    import IAnything from 'react-declarative/model/IAnything';
    import { PickProp } from 'react-declarative/model/IManaged';
    import Group, { IGroupProps } from 'react-declarative/components/common/Group';
    import IEntity from 'react-declarative/model/IEntity';
    interface IHeroTop<Data = IAnything> {
        top?: PickProp<IField<Data>, 'top'>;
        phoneTop?: PickProp<IField<Data>, 'phoneTop'>;
        tabletTop?: PickProp<IField<Data>, 'tabletTop'>;
        desktopTop?: PickProp<IField<Data>, 'desktopTop'>;
    }
    interface IHeroLeft<Data = IAnything> {
        left?: PickProp<IField<Data>, 'left'>;
        phoneLeft?: PickProp<IField<Data>, 'phoneLeft'>;
        tabletLeft?: PickProp<IField<Data>, 'tabletLeft'>;
        desktopLeft?: PickProp<IField<Data>, 'desktopLeft'>;
    }
    interface IHeroRight<Data = IAnything> {
        right?: PickProp<IField<Data>, 'right'>;
        phoneRight?: PickProp<IField<Data>, 'phoneRight'>;
        tabletRight?: PickProp<IField<Data>, 'tabletRight'>;
        desktopRight?: PickProp<IField<Data>, 'desktopRight'>;
    }
    interface IHeroBottom<Data = IAnything> {
        bottom?: PickProp<IField<Data>, 'bottom'>;
        phoneBottom?: PickProp<IField<Data>, 'phoneBottom'>;
        tabletBottom?: PickProp<IField<Data>, 'tabletBottom'>;
        desktopBottom?: PickProp<IField<Data>, 'desktopBottom'>;
    }
    interface IHeroHeight<Data = IAnything> {
        height?: PickProp<IField<Data>, 'height'>;
        phoneHeight?: PickProp<IField<Data>, 'phoneHeight'>;
        tabletHeight?: PickProp<IField<Data>, 'tabletHeight'>;
        desktopHeight?: PickProp<IField<Data>, 'desktopHeight'>;
    }
    interface IHeroMinHeight<Data = IAnything> {
        minHeight?: PickProp<IField<Data>, 'minHeight'>;
        phoneMinHeight?: PickProp<IField<Data>, 'phoneMinHeight'>;
        tabletMinHeight?: PickProp<IField<Data>, 'tabletMinHeight'>;
        desktopMinHeight?: PickProp<IField<Data>, 'desktopMinHeight'>;
    }
    interface IHeroMaxHeight<Data = IAnything> {
        maxHeight?: PickProp<IField<Data>, 'maxHeight'>;
        phoneMaxHeight?: PickProp<IField<Data>, 'phoneMaxHeight'>;
        tabletMaxHeight?: PickProp<IField<Data>, 'tabletMaxHeight'>;
        desktopMaxHeight?: PickProp<IField<Data>, 'desktopMaxHeight'>;
    }
    interface IHeroWidth<Data = IAnything> {
        width?: PickProp<IField<Data>, 'width'>;
        phoneWidth?: PickProp<IField<Data>, 'phoneWidth'>;
        tabletWidth?: PickProp<IField<Data>, 'tabletWidth'>;
        desktopWidth?: PickProp<IField<Data>, 'desktopWidth'>;
    }
    interface IHeroMinWidth<Data = IAnything> {
        minWidth?: PickProp<IField<Data>, 'minWidth'>;
        phoneMinWidth?: PickProp<IField<Data>, 'phoneMinWidth'>;
        tabletMinWidth?: PickProp<IField<Data>, 'tabletMinWidth'>;
        desktopMinWidth?: PickProp<IField<Data>, 'desktopMinWidth'>;
    }
    interface IHeroMaxWidth<Data = IAnything> {
        maxWidth?: PickProp<IField<Data>, 'maxWidth'>;
        phoneMaxWidth?: PickProp<IField<Data>, 'phoneMaxWidth'>;
        tabletMaxWidth?: PickProp<IField<Data>, 'tabletMaxWidth'>;
        desktopMaxWidth?: PickProp<IField<Data>, 'desktopMaxWidth'>;
    }
    interface IHeroStyle<Data = IAnything> {
        heroOuterStyle?: PickProp<IField<Data>, 'heroOuterStyle'>;
        heroOuterPhoneStyle?: PickProp<IField<Data>, 'heroOuterPhoneStyle'>;
        heroOuterTabletStyle?: PickProp<IField<Data>, 'heroOuterTabletStyle'>;
        heroOuterDesktopStyle?: PickProp<IField<Data>, 'heroOuterDesktopStyle'>;
        heroInnerStyle?: PickProp<IField<Data>, 'heroInnerStyle'>;
        heroInnerPhoneStyle?: PickProp<IField<Data>, 'heroInnerPhoneStyle'>;
        heroInnerTabletStyle?: PickProp<IField<Data>, 'heroInnerTabletStyle'>;
        heroInnerDesktopStyle?: PickProp<IField<Data>, 'heroInnerDesktopStyle'>;
    }
    type IHeroRegistry<D = IAnything> = IHeroTop<D> & IHeroLeft<D> & IHeroRight<D> & IHeroBottom<D> & IHeroWidth<D> & IHeroMinWidth<D> & IHeroMaxWidth<D> & IHeroHeight<D> & IHeroMinHeight<D> & IHeroMaxHeight<D> & IHeroStyle<D>;
    type Group<Data = IAnything> = Omit<IGroupProps<Data>, keyof {
        fieldRightMargin: never;
        fieldBottomMargin: never;
    }>;
    export interface IHeroLayoutProps<Data = IAnything> extends IHeroRegistry<Data>, Group<Data> {
        className?: PickProp<IField<Data>, 'className'>;
        style?: PickProp<IField<Data>, 'style'>;
        object: PickProp<IEntity<Data>, 'object'>;
    }
    interface IHeroLayoutPrivate {
        children: React.ReactChild;
        theme?: Theme;
    }
    export const HeroLayout: {
        <Data extends unknown = any>({ children, theme, className, style, object, columns, phoneColumns, tabletColumns, desktopColumns, ...otherProps }: IHeroLayoutProps<Data> & IHeroLayoutPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ children, theme, className, style, object, columns, phoneColumns, tabletColumns, desktopColumns, ...otherProps }: IHeroLayoutProps<Data> & IHeroLayoutPrivate): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/fields/CheckboxField' {
    import IManaged, { PickProp } from 'react-declarative/model/IManaged';
    import IAnything from 'react-declarative/model/IAnything';
    import IField from 'react-declarative/model/IField';
    export interface ICheckboxFieldProps<Data = IAnything> {
        title?: PickProp<IField<Data>, 'title'>;
        groupRef?: PickProp<IField<Data>, 'groupRef'>;
    }
    export interface ICheckboxFieldPrivate<Data = IAnything> {
        value: PickProp<IManaged<Data>, 'value'>;
        disabled: PickProp<IManaged<Data>, 'disabled'>;
        onChange: PickProp<IManaged<Data>, 'onChange'>;
    }
    export const CheckboxField: {
        ({ disabled, value, onChange, title }: ICheckboxFieldProps & ICheckboxFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, change, fallback, ready, compute, object, name, focus, blur, invalidity, disabled: fieldDisabled, autoFocus, readonly, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../model/IEntity").IEntity<Data>): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/fields/ComboField' {
    import IManaged, { PickProp } from "react-declarative/model/IManaged";
    import IAnything from "react-declarative/model/IAnything";
    import IField from "react-declarative/model/IField";
    export interface IComboFieldProps<Data = IAnything> {
        description?: PickProp<IField<Data>, "description">;
        placeholder?: PickProp<IField<Data>, "placeholder">;
        outlined?: PickProp<IField<Data>, "outlined">;
        itemList?: PickProp<IField<Data>, "itemList">;
        title?: PickProp<IField<Data>, "title">;
        tr?: PickProp<IField<Data>, "tr">;
        groupRef?: PickProp<IField<Data>, 'groupRef'>;
    }
    export interface IComboFieldPrivate<Data = IAnything> {
        value: PickProp<IManaged<Data>, "value">;
        disabled: PickProp<IManaged<Data>, "disabled">;
        onChange: PickProp<IManaged<Data>, "onChange">;
        dirty: PickProp<IManaged<Data>, "dirty">;
        invalid: PickProp<IManaged<Data>, "invalid">;
    }
    export const ComboField: {
        ({ value, disabled, description, placeholder, outlined, itemList, title, dirty, invalid, tr, onChange, }: IComboFieldProps & IComboFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, change, fallback, ready, compute, object, name, focus, blur, invalidity, disabled: fieldDisabled, autoFocus, readonly, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../model/IEntity").IEntity<Data>): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/fields/ComponentField' {
    import IField from 'react-declarative/model/IField';
    import IAnything from 'react-declarative/model/IAnything';
    import IManaged, { PickProp } from 'react-declarative/model/IManaged';
    export interface IComponentFieldProps<Data = IAnything> {
        element?: PickProp<IField<Data>, 'element'>;
        groupRef?: PickProp<IField<Data>, 'groupRef'>;
    }
    interface IComponentFieldPrivate<Data = IAnything> {
        object: PickProp<IManaged<Data>, 'object'>;
    }
    export const ComponentField: {
        ({ element: Element, object, }: IComponentFieldProps & IComponentFieldPrivate): JSX.Element | null;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, change, fallback, ready, compute, object, name, focus, blur, invalidity, disabled: fieldDisabled, autoFocus, readonly, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../model/IEntity").IEntity<Data>): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/fields/ItemsField' {
    import IManaged, { PickProp } from "react-declarative/model/IManaged";
    import IAnything from "react-declarative/model/IAnything";
    import IField from "react-declarative/model/IField";
    export interface IItemsFieldProps<Data = IAnything> {
        description?: PickProp<IField<Data>, "description">;
        placeholder?: PickProp<IField<Data>, "placeholder">;
        outlined?: PickProp<IField<Data>, "outlined">;
        itemList?: PickProp<IField<Data>, "itemList">;
        title?: PickProp<IField<Data>, "title">;
        tr?: PickProp<IField<Data>, "tr">;
        groupRef?: PickProp<IField<Data>, 'groupRef'>;
    }
    export interface IItemsFieldPrivate<Data = IAnything> {
        onChange: PickProp<IManaged<Data>, "onChange">;
        value: PickProp<IManaged<Data>, 'value'>;
        disabled: PickProp<IManaged<Data>, "disabled">;
        dirty: PickProp<IManaged<Data>, "dirty">;
        invalid: PickProp<IManaged<Data>, "invalid">;
    }
    export const ItemsField: {
        ({ value, disabled, description, placeholder, outlined, itemList, dirty, invalid, title, tr, onChange, }: IItemsFieldProps & IItemsFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, change, fallback, ready, compute, object, name, focus, blur, invalidity, disabled: fieldDisabled, autoFocus, readonly, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../model/IEntity").IEntity<Data>): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/fields/LineField' {
    import { PickProp } from 'react-declarative/model/IManaged';
    import IAnything from 'react-declarative/model/IAnything';
    import IField from 'react-declarative/model/IField';
    export interface ILineFieldProps<Data = IAnything> {
        title?: PickProp<IField<Data>, 'title'>;
        groupRef?: PickProp<IField<Data>, 'groupRef'>;
    }
    export const LineField: {
        ({ title, }: ILineFieldProps): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, change, fallback, ready, compute, object, name, focus, blur, invalidity, disabled: fieldDisabled, autoFocus, readonly, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../model/IEntity").IEntity<Data>): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/fields/ProgressField' {
    import IManaged, { PickProp } from "react-declarative/model/IManaged";
    import IField from "react-declarative/model/IField";
    import IAnything from "react-declarative/model/IAnything";
    export interface IProgressFieldProps<Data = IAnything> {
        maxPercent?: PickProp<IField<Data>, "maxPercent">;
        showPercentLabel?: PickProp<IField<Data>, "showPercentLabel">;
        groupRef?: PickProp<IField<Data>, 'groupRef'>;
    }
    export interface IProgressFieldPrivate<Data = IAnything> {
        value: PickProp<IManaged<Data>, "value">;
    }
    export const ProgressField: {
        ({ maxPercent, showPercentLabel, value, }: IProgressFieldProps & IProgressFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, change, fallback, ready, compute, object, name, focus, blur, invalidity, disabled: fieldDisabled, autoFocus, readonly, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../model/IEntity").IEntity<Data>): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/fields/RadioField' {
    import IField from "react-declarative/model/IField";
    import IAnything from "react-declarative/model/IAnything";
    import IManaged, { PickProp } from "react-declarative/model/IManaged";
    export interface IRadioFieldProps<Data = IAnything> {
        title?: PickProp<IField<Data>, "title">;
        radioValue?: PickProp<IField<Data>, "radioValue">;
        groupRef?: PickProp<IField<Data>, 'groupRef'>;
    }
    export interface IRadioFieldPrivate<Data = IAnything> {
        disabled: PickProp<IManaged<Data>, "disabled">;
        value: PickProp<IManaged<Data>, "value">;
        onChange: PickProp<IManaged<Data>, "onChange">;
        name?: PickProp<IManaged<Data>, 'name'>;
    }
    export const RadioField: {
        ({ disabled, value, onChange, title, radioValue, name, }: IRadioFieldProps & IRadioFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, change, fallback, ready, compute, object, name, focus, blur, invalidity, disabled: fieldDisabled, autoFocus, readonly, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../model/IEntity").IEntity<Data>): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/fields/RatingField' {
    import IManaged, { PickProp } from "react-declarative/model/IManaged";
    import IAnything from "react-declarative/model/IAnything";
    import IField from "react-declarative/model/IField";
    export interface IRatingFieldProps<Data = IAnything> {
        readonly?: PickProp<IField<Data>, "readonly">;
        title?: PickProp<IField<Data>, "title">;
        groupRef?: PickProp<IField<Data>, 'groupRef'>;
    }
    export interface IRatingFieldPrivate<Data = IAnything> {
        name?: string;
        value: PickProp<IManaged<Data>, "value">;
        disabled: PickProp<IManaged<Data>, "disabled">;
        onChange: PickProp<IManaged<Data>, "onChange">;
    }
    export const RatingField: {
        ({ value, disabled, readonly, title, name, onChange, }: IRatingFieldProps & IRatingFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, change, fallback, ready, compute, object, name, focus, blur, invalidity, disabled: fieldDisabled, autoFocus, readonly, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../model/IEntity").IEntity<Data>): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/fields/SliderField' {
    import IField from 'react-declarative/model/IField';
    import IAnything from 'react-declarative/model/IAnything';
    import IManaged, { PickProp } from 'react-declarative/model/IManaged';
    export interface ISliderFieldProps<Data = IAnything> {
        stepSlider?: PickProp<IField<Data>, 'stepSlider'>;
        maxSlider?: PickProp<IField<Data>, 'maxSlider'>;
        minSlider?: PickProp<IField<Data>, 'minSlider'>;
        leadingIcon?: PickProp<IField<Data>, 'leadingIcon'>;
        trailingIcon?: PickProp<IField<Data>, 'trailingIcon'>;
        leadingIconClick?: PickProp<IField<Data>, 'leadingIconClick'>;
        trailingIconClick?: PickProp<IField<Data>, 'trailingIconClick'>;
        sliderThumbColor?: PickProp<IField<Data>, 'sliderThumbColor'>;
        sliderTrackColor?: PickProp<IField<Data>, 'sliderTrackColor'>;
        sliderRailColor?: PickProp<IField<Data>, 'sliderRailColor'>;
        groupRef?: PickProp<IField<Data>, 'groupRef'>;
    }
    export interface ISliderFieldPrivate<Data = IAnything> {
        value: PickProp<IManaged<Data>, 'value'>;
        onChange: PickProp<IManaged<Data>, 'onChange'>;
    }
    export const SliderField: {
        ({ value, onChange, leadingIcon, trailingIcon, leadingIconClick, trailingIconClick, stepSlider, maxSlider, minSlider, }: ISliderFieldProps & ISliderFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, change, fallback, ready, compute, object, name, focus, blur, invalidity, disabled: fieldDisabled, autoFocus, readonly, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../model/IEntity").IEntity<Data>): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/fields/SwitchField' {
    import IManaged, { PickProp } from 'react-declarative/model/IManaged';
    import IAnything from 'react-declarative/model/IAnything';
    import IField from 'react-declarative/model/IField';
    export interface ISwitchFieldProps<Data = IAnything> {
        title?: PickProp<IField<Data>, 'title'>;
        groupRef?: PickProp<IField<Data>, 'groupRef'>;
    }
    export interface ISwitchFieldPrivate<Data = IAnything> {
        onChange: PickProp<IManaged<Data>, 'onChange'>;
        disabled: PickProp<IManaged<Data>, 'disabled'>;
        value: PickProp<IManaged<Data>, 'value'>;
    }
    export const SwitchField: {
        ({ disabled, value, onChange, title, }: ISwitchFieldProps & ISwitchFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, change, fallback, ready, compute, object, name, focus, blur, invalidity, disabled: fieldDisabled, autoFocus, readonly, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../model/IEntity").IEntity<Data>): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/fields/TextField' {
    import IManaged, { PickProp } from "react-declarative/model/IManaged";
    import IAnything from "react-declarative/model/IAnything";
    import IField from "react-declarative/model/IField";
    export interface ITextFieldProps<Data = IAnything> {
        inputType?: PickProp<IField<Data>, "inputType">;
        inputAutocomplete?: PickProp<IField<Data>, "inputAutocomplete">;
        description?: PickProp<IField<Data>, "description">;
        outlined?: PickProp<IField<Data>, "outlined">;
        title?: PickProp<IField<Data>, "title">;
        leadingIcon?: PickProp<IField<Data>, "leadingIcon">;
        trailingIcon?: PickProp<IField<Data>, "trailingIcon">;
        leadingIconClick?: PickProp<IField<Data>, "leadingIconClick">;
        trailingIconClick?: PickProp<IField<Data>, "trailingIconClick">;
        inputRows?: PickProp<IField<Data>, "inputRows">;
        placeholder?: PickProp<IField<Data>, "placeholder">;
        readonly?: PickProp<IField<Data>, "readonly">;
        autoFocus?: PickProp<IField<Data>, "autoFocus">;
        disabled?: PickProp<IField<Data>, "disabled">;
        groupRef?: PickProp<IField<Data>, 'groupRef'>;
        inputRef?: PickProp<IField<Data>, 'inputRef'>;
    }
    export interface ITextFieldPrivate<Data = IAnything> {
        onChange: PickProp<IManaged<Data>, "onChange">;
        invalid: PickProp<IManaged<Data>, "invalid">;
        value: PickProp<IManaged<Data>, "value">;
        loading: PickProp<IManaged<Data>, "loading">;
        disabled: PickProp<IManaged<Data>, "disabled">;
        dirty: PickProp<IManaged<Data>, "dirty">;
        name: PickProp<IManaged<Data>, "name">;
    }
    export const TextField: {
        ({ invalid, value, disabled, inputType, description, outlined, title, leadingIcon, trailingIcon, leadingIconClick, trailingIconClick, inputRows, placeholder, inputAutocomplete, dirty, loading, onChange, autoFocus, inputRef, name, }: ITextFieldProps & ITextFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, change, fallback, ready, compute, object, name, focus, blur, invalidity, disabled: fieldDisabled, autoFocus, readonly, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../model/IEntity").IEntity<Data>): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/fields/TypographyField' {
    import IManaged, { PickProp } from 'react-declarative/model/IManaged';
    import IAnything from 'react-declarative/model/IAnything';
    import IField from 'react-declarative/model/IField';
    export interface ITypographyFieldProps<Data = IAnything> {
        placeholder?: PickProp<IField<Data>, 'placeholder'>;
        typoVariant?: PickProp<IField<Data>, 'typoVariant'>;
        style?: PickProp<IField<Data>, 'style'>;
        groupRef?: PickProp<IField<Data>, 'groupRef'>;
    }
    export interface ITypographyFieldPrivate<Data = IAnything> {
        value: PickProp<IManaged<Data>, 'value'>;
    }
    export const TypographyField: {
        ({ value, placeholder, typoVariant, style, }: ITypographyFieldProps & ITypographyFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, change, fallback, ready, compute, object, name, focus, blur, invalidity, disabled: fieldDisabled, autoFocus, readonly, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../model/IEntity").IEntity<Data>): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/model/ISize' {
    import IAnything from 'react-declarative/model/IAnything';
    export interface ISize {
        height: number;
        width: number;
    }
    export type ISizeCallback<Data = IAnything> = (data: Data, size: ISize, ref: HTMLDivElement) => string;
    export default ISize;
}

declare module 'react-declarative/components/One' {
    export * from 'react-declarative/components/One/One';
    export { default } from 'react-declarative/components/One/One';
}

declare module 'react-declarative/components/List' {
    export * from "react-declarative/components/List/List";
    export { useProps as useListProps } from 'react-declarative/components/List/components/PropProvider';
    export { default } from "react-declarative/components/List/List";
}

declare module 'react-declarative/components/Switch' {
    export * from 'react-declarative/components/Switch/Switch';
    export { default } from 'react-declarative/components/Switch/Switch';
}

declare module 'react-declarative/components/Scaffold' {
    export * from "react-declarative/components/Scaffold/Scaffold";
    export { default } from "react-declarative/components/Scaffold/Scaffold";
}

declare module 'react-declarative/components/SlotFactory' {
    export * from 'react-declarative/components/SlotFactory/SlotFactory';
    export * from 'react-declarative/components/SlotFactory/SlotContext';
    export * from 'react-declarative/components/SlotFactory/ISlotFactoryContext';
    export { default } from 'react-declarative/components/SlotFactory/SlotFactory';
}

declare module 'react-declarative/components/Breadcrumbs' {
    export * from 'react-declarative/components/Breadcrumbs/Breadcrumbs';
    export { default } from 'react-declarative/components/Breadcrumbs/Breadcrumbs';
}

declare module 'react-declarative/components/hooks/useDate' {
    import dayjs from 'dayjs';
    type Fn = (d: dayjs.Dayjs | null) => void;
    export const useDate: () => () => {
        then(onData: Fn): void;
    };
    export default useDate;
}

declare module 'react-declarative/components/hooks/useTime' {
    import dayjs from 'dayjs';
    type Fn = (d: dayjs.Dayjs | null) => void;
    export const useTime: () => () => {
        then(onData: Fn): void;
    };
    export default useTime;
}

declare module 'react-declarative/components/hooks/useOne' {
    import IField from 'react-declarative/model/IField';
    import IAnything from 'react-declarative/model/IAnything';
    import TypedField from 'react-declarative/model/TypedField';
    import { OneHandler } from 'react-declarative/model/IOneProps';
    type Fn<Data = IAnything> = (d: Data | null) => void;
    interface IParams<Data extends IAnything = IAnything, Field = IField<Data>> {
        fields: Field[];
        title?: string;
        handler?: OneHandler<Data>;
    }
    export const useOne: <Data extends unknown = any, Field = IField<Data>>({ fields, title: defaultTitle, handler: defaultHandler, }: IParams<Data, Field>) => ({ handler, title, }?: Partial<IParams<Data, Field>>) => {
        then(onData: Fn): void;
    };
    export const useOneTyped: <Data extends unknown = any>(params: IParams<Data, TypedField<Data>>) => ({ handler, title, }?: Partial<IParams<Data, TypedField<Data>>>) => {
        then(onData: Fn): void;
    };
    export default useOne;
}

declare module 'react-declarative/components/hooks/useList' {
    import IField from 'react-declarative/model/IField';
    import IColumn from 'react-declarative/model/IColumn';
    import IRowData from 'react-declarative/model/IRowData';
    import IAnything from 'react-declarative/model/IAnything';
    import TypedField from 'react-declarative/model/TypedField';
    import { ListHandler } from 'react-declarative/model/IListProps';
    import SelectionMode from 'react-declarative/model/SelectionMode';
    type Fn<Data = IAnything> = (d: Data[] | null) => void;
    interface IParams<RowData extends IRowData = IAnything, FilterData extends IAnything = IAnything, Field extends IField = IField<FilterData>> {
        handler: ListHandler<RowData>;
        selectionMode?: SelectionMode.Single | SelectionMode.Multiple;
        columns?: IColumn<RowData>[];
        filters?: Field[];
        title?: string;
        height?: number;
        width?: number;
    }
    export const useList: <RowData extends IRowData = any, FilterData extends unknown = any, Field extends IField<any> = IField<FilterData>>({ handler, selectionMode, columns, filters, title, height, width, }: IParams<RowData, FilterData, Field>) => () => {
        then(onData: Fn): void;
    };
    export const useListTyped: <RowData extends IRowData = any, FilterData extends unknown = any>(params: IParams<RowData, FilterData, TypedField<FilterData>>) => () => {
        then(onData: Fn): void;
    };
    export default useList;
}

declare module 'react-declarative/components/hooks/useConfirm' {
    type Fn = (result: boolean) => void;
    interface IParams {
        title?: string;
        msg?: string;
        canCancel?: boolean;
    }
    export const useConfirm: ({ title: defaultTitle, msg: defaultMsg, canCancel: defaultCanCancel, }?: IParams) => ({ canCancel, title, msg, }?: Partial<IParams>) => {
        then(onData: Fn): void;
    };
    export default useConfirm;
}

declare module 'react-declarative/components/common/ModalProvider' {
    export * from 'react-declarative/components/common/ModalProvider/ModalProvider';
    export { default } from 'react-declarative/components/common/ModalProvider/ModalProvider';
}

declare module 'react-declarative/components/common/BottomFade/BottomFade' {
    import * as React from 'react';
    import DefaultFade from 'react-declarative/components/common/BottomFade/DefaultFade';
    export interface IBottomFadeProps {
        className?: string;
        Fade?: typeof DefaultFade;
        style?: React.CSSProperties;
        children: React.ReactChild;
        color?: string;
        selector?: string;
        zIndex?: number;
    }
    export const BottomFade: ({ className, style, color, children, zIndex, Fade, selector, }: IBottomFadeProps) => JSX.Element;
    export default BottomFade;
}

declare module 'react-declarative/components/common/ScrollView/ScrollView' {
    import * as React from 'react';
    export const SCROLL_VIEW_TARGER = "react-declarative__scrollViewTarget";
    interface IScrollViewProps {
        children: React.ReactChild;
        className?: string;
        style?: React.CSSProperties;
        center?: boolean;
    }
    export const ScrollView: ({ children, className, style, center, }: IScrollViewProps) => JSX.Element;
    export default ScrollView;
}

declare module 'react-declarative/components/common/AutoSizer/AutoSizer' {
    import * as React from "react";
    import ResizeEmitter from "react-declarative/components/common/AutoSizer/ResizeEmitter";
    import ISize from "react-declarative/model/ISize";
    export interface IChildParams<T extends unknown = object> extends ISize {
        payload: T;
    }
    interface IAutoSizerProps<T extends unknown = object> {
        children: (s: IChildParams<T>) => any;
        className?: string;
        defaultHeight?: number;
        defaultWidth?: number;
        disableHeight?: boolean;
        disableWidth?: boolean;
        nonce?: string;
        onResize?: (s: ISize) => void;
        heightRequest?: (height: number) => number;
        widthRequest?: (width: number) => number;
        style?: React.CSSProperties;
        target?: HTMLElement;
        delay?: number;
        payload?: T;
    }
    export const AutoSizer: {
        <T extends unknown = object>({ defaultHeight, defaultWidth, onResize, disableHeight, disableWidth, heightRequest, widthRequest, style, className, children, target, payload, delay, }: IAutoSizerProps<T>): JSX.Element;
        _emitters: WeakMap<HTMLElement, ResizeEmitter>;
    };
    export default AutoSizer;
}

declare module 'react-declarative/components/common/FadeView/FadeView' {
    import * as React from 'react';
    import { IBottomFadeProps } from 'react-declarative/components/common/BottomFade';
    type BottomFadeT = Pick<IBottomFadeProps, keyof {
        Fade: never;
        color: never;
        zIndex: never;
    }>;
    interface IFadeView extends BottomFadeT {
        className?: string;
        style?: React.CSSProperties;
        children: React.ReactChild;
    }
    export const FadeView: ({ className, style, children, Fade, color, zIndex, }: IFadeView) => JSX.Element;
    export default FadeView;
}

declare module 'react-declarative/components/common/Async/Async' {
    import { Value } from 'react-declarative/model/IField';
    interface IAsyncProps<T extends any = object> {
        children: (p: T) => (Value | Promise<Value>);
        fallback?: (e: Error) => void;
        payload?: T;
    }
    export const Async: <T extends unknown = object>({ children, fallback, payload, }: IAsyncProps<T>) => JSX.Element;
    export default Async;
}

declare module 'react-declarative/components/Translate/Translate' {
    import * as React from 'react';
    interface IAttributeCollection {
        [name: string]: unknown;
    }
    type Locale = Record<string, string>;
    export class Translate {
        get skipList(): string[];
        constructor(locale?: Locale);
        createElement: (type: string, props: IAttributeCollection | null, ...children: any[]) => React.DOMElement<IAttributeCollection, Element>;
    }
    global {
        interface Window {
            Translate: Translate;
        }
    }
    export const register: (locale?: Locale) => void;
    export default Translate;
}

declare module 'react-declarative/slots/CheckBoxSlot/ICheckBoxSlot' {
    import { ICheckboxFieldPrivate, ICheckboxFieldProps } from "react-declarative/fields/CheckboxField";
    export interface ICheckBoxSlot extends ICheckboxFieldProps, ICheckboxFieldPrivate {
    }
    export default ICheckBoxSlot;
}

declare module 'react-declarative/slots/CheckBoxSlot/CheckBoxSlot' {
    import ICheckBoxSlot from 'react-declarative/slots/CheckBoxSlot/ICheckBoxSlot';
    export const CheckBoxSlot: (props: ICheckBoxSlot) => JSX.Element;
    export default CheckBoxSlot;
}

declare module 'react-declarative/slots/ComboSlot/IComboSlot' {
    import { IComboFieldPrivate, IComboFieldProps } from "react-declarative/fields/ComboField";
    export interface IComboSlot extends IComboFieldProps, IComboFieldPrivate {
    }
    export default IComboSlot;
}

declare module 'react-declarative/slots/ComboSlot/ComboSlot' {
    import IComboSlot from 'react-declarative/slots/ComboSlot/IComboSlot';
    export const ComboSlot: (props: IComboSlot) => JSX.Element;
    export default ComboSlot;
}

declare module 'react-declarative/slots/ItemsSlot/IItemsSlot' {
    import { IItemsFieldPrivate, IItemsFieldProps } from "react-declarative/fields/ItemsField";
    export interface IItemsSlot extends IItemsFieldProps, IItemsFieldPrivate {
    }
    export default IItemsSlot;
}

declare module 'react-declarative/slots/ItemsSlot/ItemsSlot' {
    import IItemsSlot from 'react-declarative/slots/ItemsSlot/IItemsSlot';
    export const ItemsSlot: (props: IItemsSlot) => JSX.Element;
    export default ItemsSlot;
}

declare module 'react-declarative/slots/LineSlot/ILineSlot' {
    import { ILineFieldProps } from "react-declarative/fields/LineField";
    export interface ILineSlot extends ILineFieldProps {
    }
    export default ILineSlot;
}

declare module 'react-declarative/slots/LineSlot/LineSlot' {
    import ILineSlot from 'react-declarative/slots/LineSlot/ILineSlot';
    export const LineSlot: (props: ILineSlot) => JSX.Element;
    export default LineSlot;
}

declare module 'react-declarative/slots/ProgressSlot/IProgressSlot' {
    import { IProgressFieldProps, IProgressFieldPrivate } from "react-declarative/fields/ProgressField";
    export interface IProgressSlot extends IProgressFieldProps, IProgressFieldPrivate {
    }
    export default IProgressSlot;
}

declare module 'react-declarative/slots/ProgressSlot/ProgressSlot' {
    import IProgressSlot from 'react-declarative/slots/ProgressSlot/IProgressSlot';
    export const ProgressSlot: (props: IProgressSlot) => JSX.Element;
    export default ProgressSlot;
}

declare module 'react-declarative/slots/RadioSlot/IRadioSlot' {
    import { IRadioFieldPrivate, IRadioFieldProps } from "react-declarative/fields/RadioField";
    export interface IRadioSlot extends IRadioFieldProps, IRadioFieldPrivate {
    }
    export default IRadioSlot;
}

declare module 'react-declarative/slots/RadioSlot/RadioSlot' {
    import IRadioSlot from 'react-declarative/slots/RadioSlot/IRadioSlot';
    export const RadioSlot: (props: IRadioSlot) => JSX.Element;
    export default RadioSlot;
}

declare module 'react-declarative/slots/RatingSlot/IRatingSlot' {
    import { IRatingFieldProps, IRatingFieldPrivate } from "react-declarative/fields/RatingField";
    export interface IRatingSlot extends IRatingFieldProps, IRatingFieldPrivate {
    }
    export default IRatingSlot;
}

declare module 'react-declarative/slots/RatingSlot/RatingSlot' {
    import IRatingSlot from 'react-declarative/slots/RatingSlot/IRatingSlot';
    export const RatingSlot: (props: IRatingSlot) => JSX.Element;
    export default RatingSlot;
}

declare module 'react-declarative/slots/SliderSlot/ISliderSlot' {
    import { ISliderFieldPrivate, ISliderFieldProps } from "react-declarative/fields/SliderField";
    export interface ISliderSlot extends ISliderFieldProps, ISliderFieldPrivate {
    }
    export default ISliderSlot;
}

declare module 'react-declarative/slots/SliderSlot/SliderSlot' {
    import ISliderSlot from 'react-declarative/slots/SliderSlot/ISliderSlot';
    export const SliderSlot: (props: ISliderSlot) => JSX.Element;
    export default SliderSlot;
}

declare module 'react-declarative/slots/SwitchSlot/ISwitchSlot' {
    import { ISwitchFieldPrivate, ISwitchFieldProps } from "react-declarative/fields/SwitchField";
    export interface ISwitchSlot extends ISwitchFieldProps, ISwitchFieldPrivate {
    }
    export default ISwitchSlot;
}

declare module 'react-declarative/slots/SwitchSlot/SwitchSlot' {
    import ISwitchSlot from 'react-declarative/slots/SwitchSlot/ISwitchSlot';
    export const SwitchSlot: (props: ISwitchSlot) => JSX.Element;
    export default SwitchSlot;
}

declare module 'react-declarative/slots/TextSlot/ITextSlot' {
    import { ITextFieldProps, ITextFieldPrivate } from "react-declarative/fields/TextField";
    type ITextBase = ITextFieldProps & ITextFieldPrivate;
    export interface ITextSlot extends ITextBase {
    }
    export default ITextSlot;
}

declare module 'react-declarative/slots/TextSlot/TextSlot' {
    import ITextSlot from 'react-declarative/slots/TextSlot/ITextSlot';
    export const TypographySlot: (props: ITextSlot) => JSX.Element;
    export default TypographySlot;
}

declare module 'react-declarative/slots/TypographySlot/ITypographySlot' {
    import { ITypographyFieldPrivate, ITypographyFieldProps } from "react-declarative/fields/TypographyField";
    export interface ITypographySlot extends ITypographyFieldProps, ITypographyFieldPrivate {
    }
    export default ITypographySlot;
}

declare module 'react-declarative/slots/TypographySlot/TypographySlot' {
    import ITypographySlot from 'react-declarative/slots/TypographySlot/ITypographySlot';
    export const TypographySlot: (props: ITypographySlot) => JSX.Element;
    export default TypographySlot;
}

declare module 'react-declarative/components/common/Group' {
    export * from 'react-declarative/components/common/Group/Group';
    export { default } from 'react-declarative/components/common/Group/Group';
}

declare module 'react-declarative/components/common/Outline' {
    export * from 'react-declarative/components/common/Outline/Outline';
    export { default } from 'react-declarative/components/common/Outline/Outline';
}

declare module 'react-declarative/components/common/Paper' {
    export * from 'react-declarative/components/common/Paper/Paper';
    export { default } from 'react-declarative/components/common/Paper/Paper';
}

declare module 'react-declarative/components/common/Expansion' {
    export * from 'react-declarative/components/common/Expansion/Expansion';
    export { default } from 'react-declarative/components/common/Expansion/Expansion';
}

declare module 'react-declarative/components/One/One' {
    import TypedField from "react-declarative/model/TypedField";
    import IOnePublicProps from "react-declarative/model/IOnePublicProps";
    export const One: {
        <Data extends unknown = any>(props: IOnePublicProps<Data, import("../../model/IField").IField<Data>>): JSX.Element;
        displayName: string;
        /**
          * После написания формы можно включить строгую
          * проверку типов полей
          * <One.typed handler={...
          *     ^^^^^^
          */
        typed: {
            <Data_1 extends unknown = any>(props: IOnePublicProps<Data_1, TypedField<Data_1>>): JSX.Element;
            displayName: string;
        };
    };
    export const OneTyped: {
        <Data extends unknown = any>(props: IOnePublicProps<Data, TypedField<Data>>): JSX.Element;
        displayName: string;
    };
    export default One;
}

declare module 'react-declarative/components/List/List' {
    import IListProps from 'react-declarative/model/IListProps';
    import TypedField from 'react-declarative/model/TypedField';
    import IRowData from 'react-declarative/model/IRowData';
    import IField from 'react-declarative/model/IField';
    export const List: <FilterData extends unknown = any, RowData extends IRowData = any, Field extends IField<any> = IField<any>>(props: IListProps<FilterData, RowData, Field>, ref: any) => JSX.Element;
    export const ListTyped: <FilterData extends unknown = any, RowData extends IRowData = any>(props: IListProps<FilterData, RowData, TypedField<FilterData>>, ref: any) => JSX.Element;
    export default List;
}

declare module 'react-declarative/components/List/components/PropProvider' {
    export * from 'react-declarative/components/List/components/PropProvider/PropProvider';
    export { default } from 'react-declarative/components/List/components/PropProvider/PropProvider';
}

declare module 'react-declarative/components/Switch/Switch' {
    import * as React from 'react';
    import ISwitchProps from 'react-declarative/components/Switch/model/ISwitchProps';
    export const Switch: ({ items, fallback, history, Forbidden, NotFound, Loading, }: ISwitchProps) => React.ReactElement<any, string | React.JSXElementConstructor<any>>;
    export default Switch;
}

declare module 'react-declarative/components/Scaffold/Scaffold' {
    import * as React from "react";
    import IMenuGroup from "react-declarative/model/IMenuGroup";
    interface IScaffoldProps {
        children: React.ReactChild;
        className?: string;
        style?: React.CSSProperties;
        title?: string;
        colored?: boolean;
        selected?: string;
        options?: IMenuGroup[];
        roles?: string[];
        onOptionClick?: (name: string) => void;
    }
    export const Scaffold: {
        ({ children, className, style, selected, title, options, colored, roles: currentRoles, onOptionClick, }: IScaffoldProps): JSX.Element;
        displayName: string;
    };
    export default Scaffold;
}

declare module 'react-declarative/components/SlotFactory/SlotFactory' {
    import * as React from 'react';
    import ISlotFactoryContext from 'react-declarative/components/SlotFactory/ISlotFactoryContext';
    interface ISlotFactoryProps extends ISlotFactoryContext {
        children: React.ReactNode;
    }
    export const SlotFactory: ({ children, ...currentSlots }: Partial<ISlotFactoryProps>) => JSX.Element;
    export default SlotFactory;
}

declare module 'react-declarative/components/SlotFactory/SlotContext' {
    import ISlotFactoryContext from 'react-declarative/components/SlotFactory/ISlotFactoryContext';
    export const defaultSlots: {
        CheckBox: ({ disabled, onChange, title, value, }: import("../../slots/CheckBoxSlot").ICheckBoxSlot) => JSX.Element;
        Combo: ({ value, disabled, description, placeholder, outlined, itemList, title, dirty, invalid, tr, onChange, }: import("../../slots/ComboSlot").IComboSlot) => JSX.Element;
        Items: ({ value, disabled, description, placeholder, outlined, itemList, dirty, invalid, title, tr, onChange, }: import("../../slots/ItemsSlot").IItemsSlot) => JSX.Element;
        Line: ({ title, }: import("../../slots/LineSlot").ILineSlot) => JSX.Element;
        Radio: ({ disabled, value, onChange, title, radioValue, name, }: import("../../slots/RadioSlot").IRadioSlot) => JSX.Element;
        Rating: ({ value, disabled, readonly, title, name, onChange, }: import("../../slots/RatingSlot").IRatingSlot) => JSX.Element;
        Progress: ({ maxPercent, showPercentLabel, value, }: import("../../slots/ProgressSlot").IProgressSlot) => JSX.Element;
        Typography: ({ value, placeholder, typoVariant, style, }: import("../../slots/TypographySlot").ITypographySlot) => JSX.Element;
        Text: ({ invalid, value, disabled, inputType, description, outlined, title, leadingIcon: li, trailingIcon: ti, leadingIconClick: lic, trailingIconClick: tic, inputRows: rows, placeholder, inputAutocomplete: autoComplete, dirty, loading, autoFocus, inputRef, onChange, name, }: import("../../slots/TextSlot").ITextSlot) => JSX.Element;
        Switch: ({ disabled, value, onChange, title, }: import("../../slots/SwitchSlot").ISwitchSlot) => JSX.Element;
        Slider: ({ value, onChange, leadingIcon: li, trailingIcon: ti, leadingIconClick: lic, trailingIconClick: tic, stepSlider, maxSlider, minSlider, }: import("../../slots/SliderSlot").ISliderSlot) => JSX.Element;
    };
    export const SlotContext: import("react").Context<ISlotFactoryContext>;
    export default SlotContext;
}

declare module 'react-declarative/components/SlotFactory/ISlotFactoryContext' {
    import { ComponentType } from 'react';
    import { IProgressSlot } from 'react-declarative/slots/ProgressSlot';
    import { ICheckBoxSlot } from 'react-declarative/slots/CheckBoxSlot';
    import { IItemsSlot } from 'react-declarative/slots/ItemsSlot';
    import { IComboSlot } from 'react-declarative/slots/ComboSlot';
    import { ILineSlot } from 'react-declarative/slots/LineSlot';
    import { IRadioSlot } from 'react-declarative/slots/RadioSlot';
    import { IRatingSlot } from 'react-declarative/slots/RatingSlot';
    import { ITypographySlot } from 'react-declarative/slots/TypographySlot';
    import { ITextSlot } from 'react-declarative/slots/TextSlot';
    import { ISwitchSlot } from 'react-declarative/slots/SwitchSlot';
    import { ISliderSlot } from 'react-declarative/slots/SliderSlot';
    export interface ISlotFactoryContext {
        CheckBox: ComponentType<ICheckBoxSlot>;
        Combo: ComponentType<IComboSlot>;
        Items: ComponentType<IItemsSlot>;
        Line: ComponentType<ILineSlot>;
        Progress: ComponentType<IProgressSlot>;
        Radio: ComponentType<IRadioSlot>;
        Rating: ComponentType<IRatingSlot>;
        Typography: ComponentType<ITypographySlot>;
        Text: ComponentType<ITextSlot>;
        Switch: ComponentType<ISwitchSlot>;
        Slider: ComponentType<ISliderSlot>;
    }
    export default ISlotFactoryContext;
}

declare module 'react-declarative/components/Breadcrumbs/Breadcrumbs' {
    import IOption from 'react-declarative/model/IOption';
    interface IBreadcrumbsProps {
        onSave?: () => void;
        onBack?: () => void;
        onAction?: (action: string) => void;
        actions?: IOption[];
        disabled?: boolean;
        title?: string;
        subtitle?: string;
    }
    export const Breadcrumbs: ({ onSave, onBack, onAction, actions, disabled, title, subtitle, }: IBreadcrumbsProps) => JSX.Element;
    export default Breadcrumbs;
}

declare module 'react-declarative/components/common/ModalProvider/ModalProvider' {
    import * as React from 'react';
    interface IModalProviderProps {
        children: React.ReactNode;
    }
    export const ModalProvider: ({ children }: IModalProviderProps) => JSX.Element;
    export default ModalProvider;
}

declare module 'react-declarative/components/common/BottomFade/DefaultFade' {
    interface IDefaultFadeProps {
        className: string;
        visible: boolean;
        zIndex: number;
        color?: string;
        none: boolean;
    }
    export const DefaultFade: ({ className, visible, color, none, zIndex, }: IDefaultFadeProps) => JSX.Element;
    export default DefaultFade;
}

declare module 'react-declarative/components/common/AutoSizer/ResizeEmitter' {
    type Callback = () => void;
    export class ResizeEmitter {
        constructor(target: HTMLElement, onDispose: Callback);
        subscribe: (fn: Callback) => void;
        unsubscribe: (fn: Callback) => void;
        broadcast: () => void;
        clearTimeout: () => void;
        tryDispose: () => void;
    }
    export default ResizeEmitter;
}

declare module 'react-declarative/components/common/Group/Group' {
    import * as React from "react";
    import { IManagedLayout, PickProp } from "react-declarative/model/IManaged";
    import IAnything from "react-declarative/model/IAnything";
    import IField from "react-declarative/model/IField";
    export interface IGroupProps<Data = IAnything> extends IManagedLayout {
        style?: PickProp<IField<Data>, 'style'>;
        className?: PickProp<IField<Data>, 'className'>;
    }
    interface IGroupPrivate {
        children: React.ReactChild;
        isItem?: boolean;
        onFocus?: () => void;
    }
    export const Group: {
        ({ className, columns, phoneColumns, tabletColumns, desktopColumns, children, isItem, style, fieldRightMargin, fieldBottomMargin, onFocus, }: IGroupProps & IGroupPrivate, ref: React.Ref<HTMLDivElement>): JSX.Element;
        displayName: string;
    };
    const _default: React.ForwardRefExoticComponent<IGroupProps<any> & IGroupPrivate & React.RefAttributes<HTMLDivElement>>;
    export default _default;
}

declare module 'react-declarative/components/common/Outline/Outline' {
    import * as React from 'react';
    import { PickProp } from 'react-declarative/model/IManaged';
    import IAnything from 'react-declarative/model/IAnything';
    import IField from 'react-declarative/model/IField';
    export interface IOutlineProps<Data = IAnything> {
        className?: PickProp<IField<Data>, 'className'>;
        style?: PickProp<IField<Data>, 'style'>;
    }
    interface IOutlinePrivate {
        children: React.ReactChild;
    }
    export const Outline: {
        ({ className, style, children, }: IOutlineProps & IOutlinePrivate): JSX.Element;
        displayName: string;
    };
    export default Outline;
}

declare module 'react-declarative/components/common/Paper/Paper' {
    import * as React from 'react';
    import { PickProp } from 'react-declarative/model/IManaged';
    import IAnything from 'react-declarative/model/IAnything';
    import IField from 'react-declarative/model/IField';
    export interface IPaperProps<Data = IAnything> {
        className?: PickProp<IField<Data>, 'className'>;
        style?: PickProp<IField<Data>, 'style'>;
    }
    interface IPaperPrivate {
        children: React.ReactChild;
    }
    export const Paper: {
        ({ className, style, children, }: IPaperProps & IPaperPrivate): JSX.Element;
        displayName: string;
    };
    export default Paper;
}

declare module 'react-declarative/components/common/Expansion/Expansion' {
    import * as React from 'react';
    import { PickProp } from 'react-declarative/model/IManaged';
    import IAnything from 'react-declarative/model/IAnything';
    import IField from 'react-declarative/model/IField';
    export interface IExpansionProps<Data = IAnything> {
        title?: PickProp<IField<Data>, 'title'>;
        style?: PickProp<IField<Data>, 'style'>;
        description?: PickProp<IField<Data>, 'description'>;
        className?: PickProp<IField<Data>, 'className'>;
    }
    interface IExpansionPrivate {
        children: React.ReactChild;
    }
    export const Expansion: {
        ({ title, description, className, style, children, }: IExpansionProps & IExpansionPrivate): JSX.Element;
        displayName: string;
    };
    export default Expansion;
}

declare module 'react-declarative/model/IOnePublicProps' {
    import IAnything from "react-declarative/model/IAnything";
    import IField from "react-declarative/model/IField";
    import IOneProps from "react-declarative/model/IOneProps";
    export interface IOnePublicProps<Data = IAnything, Field = IField<Data>> extends IOneProps<Data, Field> {
        onFocus?: IOneProps<Data, Field>['focus'];
        onBlur?: IOneProps<Data, Field>['blur'];
        onReady?: IOneProps<Data, Field>['ready'];
        onChange?: IOneProps<Data, Field>['change'];
        onInvalid?: IOneProps<Data, Field>['invalidity'];
    }
    export default IOnePublicProps;
}

declare module 'react-declarative/components/List/components/PropProvider/PropProvider' {
    import * as React from 'react';
    import IListProps, { IListCallbacks, IListState } from 'react-declarative/model/IListProps';
    import IAnything from 'react-declarative/model/IAnything';
    import IField from 'react-declarative/model/IField';
    import IRowData from 'react-declarative/model/IRowData';
    interface IPropContext<FilterData extends IAnything = IAnything, RowData extends IRowData = IAnything, Field extends IField = IField<FilterData>> extends Omit<IListProps<FilterData, RowData, Field>, keyof {
        limit: never;
        autoReload: never;
    }>, IListState<FilterData, RowData>, IListCallbacks<FilterData, RowData> {
        children: React.ReactChild;
    }
    export const PropProvider: <FilterData extends unknown = any, RowData extends IRowData = any, Field extends IField<any> = IField<FilterData>>(props: IPropContext<FilterData, RowData, Field>) => JSX.Element;
    export const useProps: <FilterData extends unknown = any, RowData extends IRowData = any, Field extends IField<any> = IField<FilterData>>() => IPropContext<FilterData, RowData, Field>;
    export default PropProvider;
}

declare module 'react-declarative/components/Switch/model/ISwitchProps' {
    import { BrowserHistory } from "history";
    import { ComponentType } from "react";
    import ISwitchItem from "react-declarative/components/Switch/model/ISwitchItem";
    export interface ISwitchProps {
        items: ISwitchItem[];
        fallback?: (e: Error) => void;
        history?: BrowserHistory;
        Forbidden?: ComponentType<any>;
        NotFound?: ComponentType<any>;
        Loading?: ComponentType<any>;
    }
    export default ISwitchProps;
}
